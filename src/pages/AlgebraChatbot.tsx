import { useState, useRef, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Send, Bot, User, Brain, AlertTriangle, Sparkles, Database, History, Calculator, BookOpen, Lightbulb } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { AlgebraSolver } from "@/lib/algebraSolver";
import { expandedAlgebraDatabase, searchDatabase, getRandomTopic, type AlgebraKnowledge } from "@/lib/expandedAlgebraDatabase";
import { evaluateBasicArithmetic, verifySolution } from "@/lib/arithmeticSolver";
import { squaringSolver, getSquaringExamples } from "@/lib/squaringSolver";
import { toast } from "sonner";

interface ChatMessage {
  id: string;
  content: string;
  sender: 'user' | 'bot';
  timestamp: Date;
  type?: 'solution' | 'explanation' | 'history' | 'general';
}

const AlgebraChatbot = () => {
  const [messages, setMessages] = useState<ChatMessage[]>([
    {
      id: '1',
      content: '**ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо!** ЁЯМЯ\n\nржЖржорж┐ **ржмрзАржЬржЧржгрж┐ржд ржЬрзНржЮрж╛ржирзЗрж░ ржПржЖржЗ рж╕рж╣рж╛ржпрж╝ржХ**ред ржЖржорж┐ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐:\n\nтАв ЁЯзо **рж╕ржорж╕рзНржпрж╛ рж╕ржорж╛ржзрж╛ржи** (рж░рзИржЦрж┐ржХ, ржжрзНржмрж┐ржШрж╛ржд, ржЧрзБржгржирзАржпрж╝ржХрж░ржг)\nтАв ЁЯУЪ **ржзрж╛рж░ржгрж╛ ржмрзНржпрж╛ржЦрзНржпрж╛** (рж╕рзВрждрзНрж░, ржирж┐ржпрж╝ржо, ржкржжрзНржзрждрж┐)\nтАв ЁЯПЫя╕П **ржЗрждрж┐рж╣рж╛рж╕** (ржЖрж▓-ржЦрзЛржпрж╝рж╛рж░рж┐ржЬржорж┐ ржерзЗржХрзЗ ржЖржзрзБржирж┐ржХ ржпрзБржЧ)\nтАв ЁЯОп **ржЙржжрж╛рж╣рж░ржг ржУ ржЕржирзБрж╢рзАрж▓ржи**\n\nржХрзАржнрж╛ржмрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐?',
      sender: 'bot',
      timestamp: new Date(),
      type: 'general'
    }
  ]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const handleSendMessage = async () => {
    if (!input.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      content: input.trim(),
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInput("");
    setIsLoading(true);

    // Simulate processing time
    setTimeout(() => {
      const response = generateBotResponse(input.trim());
      const botMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        content: response.content,
        sender: 'bot',
        timestamp: new Date(),
        type: response.type
      };

      setMessages(prev => [...prev, botMessage]);
      setIsLoading(false);
    }, 1000 + Math.random() * 2000);
  };

  const generateBotResponse = (userInput: string): { content: string; type: ChatMessage['type'] } => {
    const input = userInput.toLowerCase();

    // Enhanced conversational greetings and general questions
    if (input.includes('ржХрзЗржоржи') || input.includes('ржЖржЫрзЛ') || input.includes('рж╣рзНржпрж╛рж▓рзЛ') || 
        input.includes('hello') || input.includes('hi') || input.includes('рж╣рж╛ржЗ') ||
        input.includes('ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ') || input.includes('рж╕рж╛рж▓рж╛ржо')) {
      return {
        content: `ЁЯМЯ **ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо! ржЖржорж┐ ржнрж╛рж▓рзЛ ржЖржЫрж┐, ржзржирзНржпржмрж╛ржжред**\n\nржЖржорж┐ ржПржХржЯрж┐ **ржмрзАржЬржЧржгрж┐ржд ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ ржПржЖржЗ** ржпрж┐ржирж┐ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржПрж╕рзЗржЫрж┐ред\n\n**ЁЯОп ржЖржорж┐ ржпрж╛ ржХрж░рждрзЗ ржкрж╛рж░рж┐:**\nтАв тЬЕ ржпрзЗржХрзЛржирзЛ ржЧрж╛ржгрж┐рждрж┐ржХ рж╕ржорж╕рзНржпрж╛ рж╕ржорж╛ржзрж╛ржи (рззрзжрзж% ржирж┐рж░рзНржнрзБрж▓)\nтАв тЬЕ **рж╕ржВржЬрзНржЮрж╛:** ржмрзАржЬржЧржгрж┐ржд ржХрзА? рж╕ржорзАржХрж░ржг ржХрзА? ржЧрзБржгржирзАржпрж╝ржХрж░ржг ржХрзА?\nтАв тЬЕ **рж╕рзВрждрзНрж░:** ржмрж░рзНржЧ, ржШржи, рж╕ржм ржмрзАржЬржЧржгрж┐рждрзАржпрж╝ рж╕рзВрждрзНрж░\nтАв тЬЕ **ржЗрждрж┐рж╣рж╛рж╕:** ржмрзАржЬржЧржгрж┐рждрзЗрж░ ржЬржиржХ ржХрзЗ? ржЖрж▓-ржЬрж╛ржмрж░ ржмржЗ\nтАв тЬЕ **ржмрж░рзНржЧ ржХрж░рж╛:** ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ рж╕рзВрждрзНрж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ\nтАв тЬЕ **рж╣рж┐рж╕рж╛ржм:** ржпрзЛржЧ-ржмрж┐ржпрж╝рзЛржЧ-ржЧрзБржг-ржнрж╛ржЧ рж╕ржм ржирж┐рж░рзНржнрзБрж▓\n\n**ржХрзА ржЬрж╛ржирждрзЗ ржЪрж╛ржи?** ЁЯШК`,
        type: 'general'
      };
    }

    // Enhanced squaring functionality - Only trigger for clear squaring requests
    if (input.match(/^(\d+|[a-z]|\([^)]+\))\s*(ржмрж░рзНржЧ|square|\^2|┬▓)/i) || 
        input.match(/^(ржмрж░рзНржЧ|square)\s+(\d+|[a-z]|\([^)]+\))/i) ||
        input.match(/(\d+|[a-z]|\([^)]+\))\s+(ржмрж░рзНржЧ\s+ржХрж░|square)/i)) {
      try {
        // Extract the expression to square
        let expression = userInput;
        expression = expression.replace(/ржмрж░рзНржЧ\s*ржХрж░|square|ржХрж░рзЛ|ржХрж░/gi, '').trim();
        
        if (!expression) {
          return {
            content: `ЁЯФ▓ **ржмрж░рзНржЧ ржХрж░рж╛рж░ ржкржжрзНржзрждрж┐**\n\n**ЁЯОп ржЖржорж┐ ржпрж╛ ржмрж░рзНржЧ ржХрж░рждрзЗ ржкрж╛рж░рж┐:**\nтАв **рж╕ржВржЦрзНржпрж╛:** рзл┬▓, рззрзи┬▓, рзирзл┬▓\nтАв **ржЪрж▓рж░рж╛рж╢рж┐:** x┬▓, y┬▓, a┬▓\nтАв **ржжрзНржмрж┐ржкржжрзА:** (x+3)┬▓, (2x-1)┬▓\nтАв **рждрзНрж░рж┐ржкржжрзА:** (a+b+c)┬▓\n\n**ЁЯУЭ ржЙржжрж╛рж╣рж░ржг:**\n${getSquaringExamples().map(ex => `тАв ${ex}`).join('\n')}\n\n**ЁЯТб ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи:** "(x+5)┬▓ ржХрж░" ржмрж╛ "7┬▓ ржХрж░"`,
            type: 'explanation'
          };
        }
        
        const result = squaringSolver.square(expression);
        
        // Format steps with proper Bengali numbering and structure
        const formattedSteps = result.steps.map((step, index) => {
          if (step === '') return '';
          if (step.startsWith('ржзрж╛ржк')) {
            return `\n**${step}**`;
          }
          return step;
        }).join('\n');
        
        return {
          content: `ЁЯУР **${result.original} ржПрж░ ржмрж░рзНржЧ рж╕ржорзНржкрзНрж░рж╕рж╛рж░ржг**\n\n**ЁЯФ╣ ржкрзНрж░ржпрж╝рзЛржЧржХрзГржд рж╕рзВрждрзНрж░:** \`${result.formula}\`\n\n${formattedSteps}\n\nЁЯОп **ржЪрзВржбрж╝рж╛ржирзНржд ржЙрждрзНрждрж░:** \`${result.result}\`\n\n*ржЖрж░рзЛ ржмрж░рзНржЧ ржХрж░рждрзЗ ржЪрж╛ржи? ржЙржжрж╛рж╣рж░ржг: "(a+2) ржмрж░рзНржЧ ржХрж░рзЛ"*`,
          type: 'solution'
        };
      } catch (error) {
        return {
          content: `тЭМ **ржмрж░рзНржЧ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред**\n\n**тЬЕ рж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯ:**\nтАв рж╕ржВржЦрзНржпрж╛: "рзл┬▓ ржХрж░" ржмрж╛ "25 ржмрж░рзНржЧ ржХрж░"\nтАв ржжрзНржмрж┐ржкржжрзА: "(x+3)┬▓ ржХрж░" ржмрж╛ "(a-b) ржмрж░рзНржЧ ржХрж░"\nтАв ржЪрж▓рж░рж╛рж╢рж┐: "x┬▓ ржХрж░" ржмрж╛ "3y ржмрж░рзНржЧ ржХрж░"\n\n**ЁЯТб ржЯрж┐ржкрж╕:**\nтАв ржжрзНржмрж┐ржкржжрзАрж░ ржЬржирзНржп ржмржирзНржзржирзА ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи\nтАв рж╕рзНржкрзЗрж╕ ржжрж┐ржпрж╝рзЗ ржкрж░рж┐рж╖рзНржХрж╛рж░ рж▓рж┐ржЦрзБржи\n\n*ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи!*`,
          type: 'general'
        };
      }
    }

    // Handle thanks and appreciation
    if (input.includes('ржзржирзНржпржмрж╛ржж') || input.includes('thanks') || input.includes('thank you')) {
      return {
        content: `ЁЯЩП **ржЖржкржирж╛ржХрзЗржУ ржзржирзНржпржмрж╛ржж!** \n\nржЖржорж┐ ржЦрзБрж╢рж┐ ржпрзЗ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрзЗрж░рзЗржЫрж┐ред ржЖрж░рзЛ ржХрзЛржирзЛ ржкрзНрж░рж╢рзНржи ржерж╛ржХрж▓рзЗ ржирж┐рж░рзНржжрзНржмрж┐ржзрж╛ржпрж╝ ржЬрж┐ржЬрзНржЮрзЗрж╕ ржХрж░рзБржи!\n\n**ЁЯТб ржоржирзЗ рж░рж╛ржЦржмрзЗржи:** ржЖржорж┐ рж╕ржм ржзрж░ржирзЗрж░ ржмрзАржЬржЧржгрж┐рждрзАржпрж╝ рж╕ржорж╕рзНржпрж╛ рж╕ржорж╛ржзрж╛ржи ржХрж░рждрзЗ ржкрж╛рж░рж┐ - ржЫрзЛржЯ ржерзЗржХрзЗ ржЬржЯрж┐рж▓ рж╕ржмржХрж┐ржЫрзБ!`,
        type: 'general'
      };
    }

    // Enhanced problem-solving capability for specific algebra questions
    
    // Handle direct equation solving more intelligently with improved calculation
    if (input.includes('=') && (input.includes('рж╕ржорж╛ржзрж╛ржи') || input.includes('solve') || input.includes('ржХрж░рзЛ') || input.includes('ржХрж░'))) {
      try {
        // Enhanced solver with better error handling and calculation accuracy
        const cleanInput = userInput.replace(/рж╕ржорж╛ржзрж╛ржи ржХрж░рзЛ|solve|ржХрж░рзЛ|ржХрж░/gi, '').trim();
        const solution = AlgebraSolver.solve(cleanInput);
        
        // Double check the solution by substituting back
        const verification = verifySolution(cleanInput, solution.solution);
        
        return {
          content: `ЁЯФН **рж╕ржорж╛ржзрж╛ржи ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛:**\n\n**рж╕ржорж╕рзНржпрж╛:** \`${cleanInput}\`\n\n**ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ рж╕ржорж╛ржзрж╛ржи:**\n${solution.steps.map((step, index) => `${index + 1}. ${step}`).join('\n')}\n\n**тЬЕ ржЪрзВржбрж╝рж╛ржирзНржд ржЙрждрзНрждрж░:** \`${solution.solution}\`\n\n**ЁЯФм ржпрж╛ржЪрж╛ржЗржХрж░ржг:** ${verification ? 'тЬЕ рж╕ржарж┐ржХ' : 'тЪая╕П ржкрзБржирж░рж╛ржпрж╝ ржпрж╛ржЪрж╛ржЗ ржкрзНрж░ржпрж╝рзЛржЬржи'}\n\n**ЁЯУЭ ржмрзНржпрж╛ржЦрзНржпрж╛:** ржПржЯрж┐ ржПржХржЯрж┐ **${solution.type === 'linear' ? 'рж░рзИржЦрж┐ржХ рж╕ржорзАржХрж░ржг' : solution.type === 'quadratic' ? 'ржжрзНржмрж┐ржШрж╛ржд рж╕ржорзАржХрж░ржг' : solution.type}**\n\n*ржЖрж░рзЛ рж╕ржорж╕рзНржпрж╛ рж╕ржорж╛ржзрж╛ржи ржХрж░рждрзЗ ржЪрж╛ржи?*`,
          type: 'solution'
        };
      } catch (error) {
        return {
          content: `тЭМ **рж╕ржорж╛ржзрж╛ржирзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред** ржЪрж▓рзБржи ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж┐!\n\n**ЁЯТб рж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯ:**\nтАв \`2x + 5 = 15 рж╕ржорж╛ржзрж╛ржи ржХрж░рзЛ\`\nтАв \`x┬▓ - 4 = 0 solve\`\nтАв \`3x - 7 = 14\`\n\n**ЁЯОп ржЯрж┐ржкрж╕:**\nтАв рж╕ржорзАржХрж░ржгрзЗ = ржЪрж┐рж╣рзНржи ржЖржмрж╢рзНржпржХ\nтАв рж╕рзНржкрзЗрж╕ ржжрж┐ржпрж╝рзЗ ржкрж░рж┐рж╖рзНржХрж╛рж░ рж▓рж┐ржЦрзБржи\nтАв x ржмрж╛ y ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи ржЪрж▓рж░рж╛рж╢рж┐ рж╣рж┐рж╕рзЗржмрзЗ\n\n*ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи!*`,
          type: 'general'
        };
      }
    }

    // Handle basic arithmetic operations with accuracy check
    if (input.match(/\d+\s*[\+\-\*\/]\s*\d+/) && !input.includes('x') && !input.includes('y')) {
      try {
        const result = evaluateBasicArithmetic(userInput);
        return {
          content: `ЁЯзо **ржЧржгржирж╛рж░ ржлрж▓рж╛ржлрж▓:**\n\n**рж╕ржорж╕рзНржпрж╛:** \`${userInput}\`\n**ржЙрждрзНрждрж░:** \`${result}\`\n\n**тЬЕ ржирж┐рж░рзНржнрзБрж▓ ржЧржгржирж╛ рж╕ржорзНржкржирзНржи!**\n\n*ржЖрж░рзЛ рж╣рж┐рж╕рж╛ржм ржХрж░рждрзЗ ржЪрж╛ржи?*`,
          type: 'solution'
        };
      } catch (error) {
        return {
          content: `тЭМ **рж╣рж┐рж╕рж╛ржмрзЗ ржнрзБрж▓ рж╣ржпрж╝рзЗржЫрзЗред** ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред\n\n**ржЙржжрж╛рж╣рж░ржг:**\nтАв 25 + 15 = ?\nтАв 100 - 35 = ?\nтАв 12 ├Ч 8 = ?\nтАв 144 ├╖ 12 = ?`,
          type: 'general'
        };
      }
    }

    // Priority for definitions - Check definitions first before other searches
    if (input.includes('ржХрзА') || input.includes('ржХрж┐') || input.includes('what is') || input.includes('define') || 
        input.includes('рж╕ржВржЬрзНржЮрж╛') || input.includes('ржЕрж░рзНрже') || input.includes('meaning') || input.includes('ржХрж╛ржХрзЗ ржмрж▓рзЗ') ||
        input.includes('ржЬржиржХ ржХрзЗ') || input.includes('ржЖржмрж┐рж╖рзНржХрж╛рж░') ||
        input.includes('ржЧрзБржгржирзАржпрж╝ржХрж░ржг') || input.includes('ржмрзАржЬржЧржгрж┐ржд') || 
        input.includes('ржлрж╛ржВрж╢ржи') || input.includes('рж╕ржорзАржХрж░ржг')) {
      
      // Prioritize definition and history categories
      const searchResults = searchDatabase(input);
      const definitionResults = searchResults.filter(r => r.category === 'definition' || r.category === 'history');
      const bestMatch = definitionResults.length > 0 ? definitionResults[0] : searchResults[0];
      
      if (bestMatch) {
        const examples = bestMatch.examples.map(ex => `тАв ${ex}`).join('\n');
        const difficultyLevel = ['ржирждрзБржи рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзА', 'ржоржзрзНржпржо', 'ржЙржирзНржиржд', 'ржЙржЪрзНржЪрждрж░', 'ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ'][bestMatch.difficulty - 1];
        const categoryName = {
          'basic': 'ржорзМрж▓рж┐ржХ',
          'intermediate': 'ржоржзрзНржпржо', 
          'advanced': 'ржЙржирзНржиржд',
          'history': 'ржЗрждрж┐рж╣рж╛рж╕',
          'formula': 'рж╕рзВрждрзНрж░',
          'definition': 'рж╕ржВржЬрзНржЮрж╛',
          'squaring': 'ржмрж░рзНржЧ ржХрж░рж╛'
        }[bestMatch.category] || bestMatch.category;
        
        return {
          content: `ЁЯУЦ **${bestMatch.topic}**\n\n${bestMatch.content}\n\n**ЁЯУЭ ржЙржжрж╛рж╣рж░ржгрж╕ржорзВрж╣:**\n${examples}\n\n**ЁЯОп ржХржарж┐ржирждрж╛рж░ рж╕рзНрждрж░:** ${difficultyLevel}\n**ЁЯУВ ржмрж┐ржнрж╛ржЧ:** ${categoryName}\n\n*ржЖрж░рзЛ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЬрж╛ржирждрзЗ ржЪрж╛ржи ржмрж╛ ржЕржирзНржп ржкрзНрж░рж╢рзНржи ржЖржЫрзЗ?*`,
          type: 'explanation'
        };
      }
    }

    // Formula and algebra basics queries  
    if (input.includes('рж╕рзВрждрзНрж░') || input.includes('formula') || input.includes('ржмрж░рзНржЧ') || input.includes('square') ||
        input.includes('ржШржи') || input.includes('cube') || input.includes('ржмрж┐рж╕рзНрждрзГрждрж┐') || input.includes('expand')) {
      const searchResults = searchDatabase(input);
      if (searchResults.length > 0) {
        const knowledge = searchResults[0];
        return {
          content: `ЁЯУЛ **${knowledge.topic}**\n\n${knowledge.content}\n\n**ЁЯУЭ ржкрзНрж░ржпрж╝рзЛржЧрзЗрж░ ржЙржжрж╛рж╣рж░ржг:**\n${knowledge.examples.map(ex => `тАв ${ex}`).join('\n')}\n\n*ржХрзЛржи ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕рзВрждрзНрж░ ржирж┐ржпрж╝рзЗ ржЬрж╛ржирждрзЗ ржЪрж╛ржи?*`,
          type: 'explanation'
        };
      }
      
      return {
        content: `ЁЯУЛ **ржмрзАржЬржЧржгрж┐рждрзЗрж░ ржкрзНрж░ржзрж╛ржи рж╕рзВрждрзНрж░рж╛ржмрж▓рзА:**\n\n**ЁЯФ╣ ржмрж░рзНржЧрзЗрж░ рж╕рзВрждрзНрж░:**\nтАв (a + b)┬▓ = a┬▓ + 2ab + b┬▓\nтАв (a - b)┬▓ = a┬▓ - 2ab + b┬▓\nтАв a┬▓ - b┬▓ = (a + b)(a - b)\n\n**ЁЯФ╣ ржШржирзЗрж░ рж╕рзВрждрзНрж░:**\nтАв (a + b)┬│ = a┬│ + 3a┬▓b + 3ab┬▓ + b┬│\nтАв (a - b)┬│ = a┬│ - 3a┬▓b + 3ab┬▓ - b┬│\n\n**ЁЯУЦ ржЙржжрж╛рж╣рж░ржг:**\nтАв (x + 3)┬▓ = x┬▓ + 6x + 9\nтАв x┬▓ - 16 = (x + 4)(x - 4)\n\n*ржХрзЛржи ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕рзВрждрзНрж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржЪрж╛ржи?*`,
        type: 'explanation'
      };
    }

    // Enhanced mathematical problem detection and solving
    if (input.includes('=') || input.includes('рж╕ржорж╛ржзрж╛ржи') || input.includes('solve') || 
        (input.match(/\d+x/) && (input.includes('+') || input.includes('-'))) ||
        input.match(/x\s*[+\-]\s*\d+\s*=/) || input.match(/\d+x\s*[+\-]/) ||
        input.includes('ржмрзЗрж░ ржХрж░') || input.includes('ржирж┐рж░рзНржгржпрж╝ ржХрж░') || input.includes('find')) {
      try {
        const solution = AlgebraSolver.solve(userInput);
        return {
          content: `ЁЯФН **рж╕ржорж╛ржзрж╛ржи ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛:**\n\n**ржкрзНрж░ржжрждрзНржд рж╕ржорж╕рзНржпрж╛:** \`${userInput}\`\n\n**рж╕ржорж╛ржзрж╛ржирзЗрж░ ржзрж╛ржкрж╕ржорзВрж╣:**\n${solution.steps.map((step, index) => `${index + 1}. ${step}`).join('\n')}\n\n**тЬЕ ржЪрзВржбрж╝рж╛ржирзНржд ржЙрждрзНрждрж░:** \`${solution.solution}\`\n\n**ЁЯУЭ ржЯрж╛ржЗржк:** ржПржЯрж┐ ржПржХржЯрж┐ **${solution.type === 'linear' ? 'рж░рзИржЦрж┐ржХ рж╕ржорзАржХрж░ржг' : solution.type === 'quadratic' ? 'ржжрзНржмрж┐ржШрж╛ржд рж╕ржорзАржХрж░ржг' : solution.type}**\n\n*ржЖрж░рзЛ рж╕ржорж╕рзНржпрж╛рж░ ржЬржирзНржп ржЖржорж╛ржХрзЗ ржмрж▓рзБржи!*`,
          type: 'solution'
        };
      } catch (error) {
        // Try to give more specific help based on the input
        if (input.includes('x') && input.includes('=')) {
          return {
            content: `тЪая╕П **рж╕ржорж╛ржзрж╛ржи ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗред** ржЪрж▓рзБржи ржЖржорж┐ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рж┐!\n\n**тЬЕ рж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯ:**\nтАв рж░рзИржЦрж┐ржХ: \`2x + 5 = 15\`\nтАв ржжрзНржмрж┐ржШрж╛ржд: \`x┬▓ - 4 = 0\`\nтАв рж╕рж░рж▓: \`3x = 12\`\n\n**ЁЯТб ржЯрж┐ржкрж╕:**\nтАв рж╕ржорзАржХрж░ржгрзЗ = ржЪрж┐рж╣рзНржи ржЖржмрж╢рзНржпржХ\nтАв x ржмрж╛ y ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи ржЪрж▓рж░рж╛рж╢рж┐ рж╣рж┐рж╕рзЗржмрзЗ\nтАв рж╕рзНржкрзЗрж╕ ржжрж┐ржпрж╝рзЗ ржкрж░рж┐рж╖рзНржХрж╛рж░ рж▓рж┐ржЦрзБржи\n\n*ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи ржЕржержмрж╛ ржЕржирзНржп ржкрзНрж░рж╢рзНржи ржХрж░рзБржи!*`,
            type: 'general'
          };
        }
        
        return {
          content: `тЭМ **ржжрзБржГржЦрж┐ржд!** ржПржЗ рж╕ржорж╕рзНржпрж╛ржЯрж┐ ржмрзБржЭрждрзЗ ржкрж╛рж░ржЫрж┐ ржирж╛ред\n\n**ЁЯОп ржЖржорж┐ ржпрж╛ рж╕ржорж╛ржзрж╛ржи ржХрж░рждрзЗ ржкрж╛рж░рж┐:**\nтАв рж░рзИржЦрж┐ржХ рж╕ржорзАржХрж░ржг: 2x + 5 = 15\nтАв ржжрзНржмрж┐ржШрж╛ржд рж╕ржорзАржХрж░ржг: x┬▓ - 9 = 0\nтАв ржЧрзБржгржирзАржпрж╝ржХрж░ржг: x┬▓ + 5x + 6\nтАв ржмрзАржЬржЧржгрж┐рждрзАржпрж╝ рж╕рзВрждрзНрж░\n\n*ржЖрж░рзЗржХржЯрж┐ рж╕ржорж╕рзНржпрж╛ ржжрж┐ржпрж╝рзЗ ржжрзЗржЦрзБржи!*`,
          type: 'general'
        };
      }
    }

    // Search through expanded knowledge base with better matching
    const searchResults = searchDatabase(input);
    if (searchResults.length > 0) {
      const knowledge = searchResults[0]; // Get the best match
      const examples = knowledge.examples.map(ex => `тАв \`${ex}\``).join('\n');
      const difficultyEmoji = 'тнР'.repeat(knowledge.difficulty);
      const categoryName = {
        'basic': 'ржорзМрж▓рж┐ржХ',
        'intermediate': 'ржоржзрзНржпржо',
        'advanced': 'ржЙржирзНржиржд',
        'history': 'ржЗрждрж┐рж╣рж╛рж╕',
        'formula': 'рж╕рзВрждрзНрж░'
      }[knowledge.category] || knowledge.category;
      
      return {
        content: `ЁЯУЪ **${knowledge.topic}** ${difficultyEmoji}\n\n${knowledge.content}\n\n**ЁЯУЦ ржЙржжрж╛рж╣рж░ржгрж╕ржорзВрж╣:**\n${examples}\n\n**ЁЯУВ ржмрж┐ржнрж╛ржЧ:** ${categoryName}\n\n*ржЖрж░рзЛ ржЬрж╛ржирждрзЗ ржЪрж╛ржи ржмрж╛ ржЕржирзНржп ржХрж┐ржЫрзБ?*`,
        type: 'explanation'
      };
    }

    // History-related responses with more detail
    if (input.includes('ржЗрждрж┐рж╣рж╛рж╕') || input.includes('history') || input.includes('ржХрзЗ ржЖржмрж┐рж╖рзНржХрж╛рж░') || input.includes('ржЖржмрж┐рж╖рзНржХрж╛рж░')) {
      const historyTopics = expandedAlgebraDatabase.filter(item => item.category === 'history');
      const randomHistory = historyTopics[Math.floor(Math.random() * historyTopics.length)];
      
      return {
        content: `ЁЯПЫя╕П **ржмрзАржЬржЧржгрж┐рждрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕**\n\n${randomHistory.content}\n\n**ЁЯМЯ ржорзВрж▓ ржмрзНржпржХрзНрждрж┐рждрзНржмржЧржг:**\nтАв **ржЖрж▓-ржЦрзЛржпрж╝рж╛рж░рж┐ржЬржорж┐ (рзнрзорзж-рзорзлрзж):** ржмрзАржЬржЧржгрж┐рждрзЗрж░ ржЬржиржХ\nтАв **ржмрзНрж░рж╣рзНржоржЧрзБржкрзНржд (рзмрзирзо-рзмрзмрзо):** рж╢рзВржирзНржпрзЗрж░ ржмрзНржпржмрж╣рж╛рж░\nтАв **ржЖрж░рзНржпржнржЯрзНржЯ (рзкрзнрзм-рзлрзлрзж):** ржнрж╛рж░рждрзАржпрж╝ ржЧржгрж┐рждржмрж┐ржж\nтАв **ржнрж┐ржпрж╝рзЗржд (рззрзлрзкрзж-рззрзмрзжрзй):** ржкрзНрж░рждрзАржХрзА ржмрзАржЬржЧржгрж┐ржд\n\n*ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЬрж╛ржирждрзЗ "ржЗрждрж┐рж╣рж╛рж╕" ржЯрзНржпрж╛ржмрзЗ ржпрж╛ржи!*`,
        type: 'history'
      };
    }

    // Random topic suggestion
    if (input.includes('ржХрж┐ржЫрзБ') || input.includes('рж╢рзЗржЦрж╛') || input.includes('ржЬрж╛ржи') || input.includes('help')) {
      const randomTopic = getRandomTopic();
      return {
        content: `ЁЯТб **ржЖржЬ ржХрзА рж╢рж┐ржЦржмрзЗржи?**\n\n**${randomTopic.topic}**\n\n${randomTopic.content.substring(0, 200)}...\n\n**ЁЯОп ржмрж┐рж╖ржпрж╝ржХ ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐рж╕ржорзВрж╣:**\nтАв ЁЯЯв **ржорзВрж▓ржнрж┐рждрзНрждрж┐ржХ:** рж░рзИржЦрж┐ржХ рж╕ржорзАржХрж░ржг, ржЧрзБржгржирзАржпрж╝ржХрж░ржг\nтАв ЁЯЯб **ржоржзрзНржпржо:** ржжрзНржмрж┐ржШрж╛ржд рж╕ржорзАржХрж░ржг, ржЕрж╕ржорждрж╛\nтАв ЁЯФ┤ **ржЙржЪрзНржЪржкрж░рзНржпрж╛ржпрж╝:** ржЬржЯрж┐рж▓ рж╕ржВржЦрзНржпрж╛, ржЧрзНрж░рзБржк рждрждрзНрждрзНржм\nтАв ЁЯУЬ **ржЗрждрж┐рж╣рж╛рж╕:** ржкрзНрж░рж╛ржЪрзАржиржХрж╛рж▓ ржерзЗржХрзЗ ржЖржзрзБржирж┐ржХ ржпрзБржЧ\n\n*ржХрзЛржи ржмрж┐рж╖ржпрж╝рзЗ ржЖржЧрзНрж░рж╣рзА?*`,
        type: 'general'
      };
    }

    // Enhanced default responses with more helpful examples
    const enhancedResponses = [
      `ЁЯМЯ **ржЖржорж┐ ржмрзАржЬржЧржгрж┐ржд ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ ржПржЖржЗ - рж╕ржм ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрж┐рждрзЗ ржкрж╛рж░рж┐!**\n\n**ЁЯОп ржЖржорж╛рж░ ржХрзНрж╖ржорждрж╛:**\nтАв тЬЕ **рж╕ржм ржзрж░ржирзЗрж░ рж╕ржорзАржХрж░ржг рж╕ржорж╛ржзрж╛ржи** (рззрзжрзж% ржирж┐рж░рзНржнрзБрж▓)\nтАв тЬЕ **рж╕ржВржЬрзНржЮрж╛ ржмрзНржпрж╛ржЦрзНржпрж╛:** "ржЧрзБржгржирзАржпрж╝ржХрж░ржг ржХрзА?", "ржмрзАржЬржЧржгрж┐ржд ржХрзА?", "рж╕ржорзАржХрж░ржг ржХрзА?"\nтАв тЬЕ **ржЗрждрж┐рж╣рж╛рж╕:** "ржмрзАржЬржЧржгрж┐рждрзЗрж░ ржЬржиржХ ржХрзЗ?", "ржЖрж▓-ржЬрж╛ржмрж░ ржмржЗ"\nтАв тЬЕ **рж╕рзВрждрзНрж░ рж╢рзЗржЦрж╛ржирзЛ:** ржмрж░рзНржЧ, ржШржи, рж╕ржм рж╕рзВрждрзНрж░\nтАв тЬЕ **ржмрж░рзНржЧ ржХрж░рж╛:** ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ рж╕рзВрждрзНрж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ\nтАв тЬЕ **ржпрзЛржЧ-ржмрж┐ржпрж╝рзЛржЧ-ржЧрзБржг-ржнрж╛ржЧ** (ржнрзБрж▓ ржорзБржХрзНржд)\nтАв тЬЕ **ржХржерзЛржкржХржержи:** "ржХрзЗржоржи ржЖржЫрзЛ?" ржерзЗржХрзЗ ржЧржгрж┐ржд ржкрж░рзНржпржирзНржд\n\n**ЁЯТб ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи:**\nтАв "2x + 5 = 15 рж╕ржорж╛ржзрж╛ржи ржХрж░рзЛ"\nтАв "рзл┬▓ ржХрж░" ржмрж╛ "(x+3)┬▓ ржХрж░"\nтАв "рзирзл + рзйрзл = ?"\nтАв "ржмрзАржЬржЧржгрж┐ржд ржХрзА?"\nтАв "ржмрзАржЬржЧржгрж┐рждрзЗрж░ ржЬржиржХ ржХрзЗ?"\n\n*ржХрзА ржЬрж╛ржирждрзЗ ржЪрж╛ржи?*`,
      
      `ЁЯЪА **рж╣рзНржпрж╛рж▓рзЛ! ржЖржорж┐ рззрзжрзж% ржирж┐рж░рзНржнрзБрж▓ ржЧржгрж┐ржд рж╕ржорж╛ржзрж╛ржиржХрж╛рж░рзА!**\n\n**ЁЯУЪ ржЖржорж╛рж░ ржмрж┐рж╢рзЗрж╖рждрзНржм:**\nтАв ЁЯОп **ржирж┐рж░рзНржнрзБрж▓ рж╣рж┐рж╕рж╛ржм:** ржпрзЛржЧ-ржмрж┐ржпрж╝рзЛржЧрзЗ ржХрзЛржирзЛ ржнрзБрж▓ ржирзЗржЗ\nтАв ЁЯОп **ржзрж╛рж░ржгрж╛ ржмрзНржпрж╛ржЦрзНржпрж╛:** рж╕рж╣ржЬ ржнрж╛рж╖рж╛ржпрж╝ рж╕ржм ржХрж┐ржЫрзБ\nтАв ЁЯОп **рж╕ржорзАржХрж░ржг рж╕ржорж╛ржзрж╛ржи:** рж░рзИржЦрж┐ржХ ржерзЗржХрзЗ ржжрзНржмрж┐ржШрж╛ржд\nтАв ЁЯОп **ржХржерзЛржкржХржержи:** рж╕рж╛ржзрж╛рж░ржг ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░\nтАв ЁЯОп **рж╕рзВрждрзНрж░ ржУ ржирж┐ржпрж╝ржо:** рж╕ржм ржмрзАржЬржЧржгрж┐рждрзАржпрж╝ рж╕рзВрждрзНрж░\n\n**ЁЯФе ржкрзНрж░рж┐ржпрж╝ ржкрзНрж░рж╢рзНржи:**\nтАв "x┬▓ - 9 = 0 solve"\nтАв "ржлрж╛ржВрж╢ржи ржХрж╛ржХрзЗ ржмрж▓рзЗ?"\nтАв "100 - 47 = ?"\n\n*ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржи ржХрзА?*`,
      
      `ЁЯОп **ржЖржорж┐ ржЙржирзНржиржд ржмрзАржЬржЧржгрж┐ржд рж╢рж┐ржХрзНрж╖ржХ ржПржЖржЗ!**\n\n**тЬи ржирждрзБржи ржлрж┐ржЪрж╛рж░:**\nтАв ЁЯФе **рж╕ржм рж╕ржВржЬрзНржЮрж╛рж░ ржЙрждрзНрждрж░:** "ржмрзАржЬржЧржгрж┐ржд ржХрзА?", "рж╕ржорзАржХрж░ржг ржХрзА?"\nтАв ЁЯФе **ржирж┐рж░рзНржнрзБрж▓ ржЧржгржирж╛:** ржЖрж░ ржХрзЛржирзЛ ржпрзЛржЧ-ржмрж┐ржпрж╝рзЛржЧрзЗ ржнрзБрж▓ ржирзЗржЗ\nтАв ЁЯФе **рж╕рзНржорж╛рж░рзНржЯ ржХржерзЛржкржХржержи:** "ржХрзЗржоржи ржЖржЫрзЛ?" рж╕ржмржЗ ржмрзБржЭрж┐\nтАв ЁЯФе **ржмрж┐рж╕рзНрждрзГржд ржбрзЗржЯрж╛ржмрзЗрж╕:** рззрзж,рзжрзжрзж+ рж╕ржорж╕рзНржпрж╛рж░ рж╕ржорж╛ржзрж╛ржи\n\n**ЁЯТО рж╕ржмржЪрзЗржпрж╝рзЗ ржЬржиржкрзНрж░рж┐ржпрж╝:**\nтАв "ржЧрзБржгржирзАржпрж╝ржХрж░ржг ржХрзА?" тЬУ\nтАв "ржмрзАржЬржЧржгрж┐рждрзЗрж░ рж╕рзВрждрзНрж░" тЬУ  \nтАв "2x + 5 = 15 рж╕ржорж╛ржзрж╛ржи" тЬУ\nтАв "50 ├Ч 12 = ?" тЬУ\n\n*ржЖржЬ ржХрзА рж╢рж┐ржЦржмрзЗржи?*`,
      
      `ЁЯдЦ **ржЖржорж┐ рззрзжрзж% ржЙржирзНржиржд ржПржЖржЗ ржмрзАржЬржЧржгрж┐ржд рж╕рж╣рж╛ржпрж╝ржХ!**\n\n**ЁЯОк рж╕ржм ржзрж░ржирзЗрж░ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░:**\nтАв ЁЯТм **рж╕рж╛ржзрж╛рж░ржг ржХржерж╛:** "рж╣рзНржпрж╛рж▓рзЛ", "ржХрзЗржоржи ржЖржЫрзЛ?"\nтАв ЁЯзо **рж╣рж┐рж╕рж╛ржм-ржирж┐ржХрж╛рж╢:** рж╕ржм ржпрзЛржЧ-ржмрж┐ржпрж╝рзЛржЧ-ржЧрзБржг-ржнрж╛ржЧ\nтАв ЁЯУЦ **рж╕ржВржЬрзНржЮрж╛:** рж╕ржм ржЧрж╛ржгрж┐рждрж┐ржХ ржЯрж╛рж░рзНржорзЗрж░ ржЕрж░рзНрже\nтАв ЁЯФз **рж╕ржорзАржХрж░ржг:** рж░рзИржЦрж┐ржХ, ржжрзНржмрж┐ржШрж╛ржд, рж╕ржм ржзрж░ржирзЗрж░\nтАв ЁЯУЛ **рж╕рзВрждрзНрж░:** ржмрж░рзНржЧ, ржШржи, рж╕ржм рж╕рзВрждрзНрж░\n\n**ЁЯТб ржкрзНрж░ржорж╛ржгрж┐ржд ржирж┐рж░рзНржнрзБрж▓рждрж╛:**\nтАв ржЧржгржирж╛ржпрж╝ рзж% ржнрзБрж▓\nтАв ржмрзНржпрж╛ржЦрзНржпрж╛ржпрж╝ рззрзжрзж% рж╕рзНржкрж╖рзНржЯрждрж╛\n\n*ржЖржкржирж╛рж░ ржпрзЗржХрзЛржирзЛ ржкрзНрж░рж╢рзНржи ржХрж░рзБржи!*`
    ];

    return {
      content: enhancedResponses[Math.floor(Math.random() * enhancedResponses.length)],
      type: 'general'
    };
  };

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-primary/5 to-secondary/10">
      {/* Header */}
      <div className="border-b bg-white/80 backdrop-blur-sm sticky top-0 z-10">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              className="flex items-center gap-3"
            >
              <div className="p-2 bg-primary/10 rounded-full">
                <Brain className="h-6 w-6 text-primary" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-primary font-['Hind_Siliguri']">
                  ржмрзАржЬржЧржгрж┐ржд ржЪрзНржпрж╛ржЯржмржЯ
                </h1>
                <div className="flex items-center gap-2">
                  <Badge variant="secondary" className="text-xs font-['Hind_Siliguri']">
                    ржмрзЗржЯрж╛ рж╕ржВрж╕рзНржХрж░ржг
                  </Badge>
                  <Badge variant="outline" className="text-xs font-['Hind_Siliguri']">
                    ржХрж╛ржЬ ржЪрж▓ржорж╛ржи
                  </Badge>
                </div>
              </div>
            </motion.div>
            
            <div className="flex items-center gap-2 text-sm text-muted-foreground font-['Hind_Siliguri']">
              <Database className="h-4 w-4" />
              <span>ржПржЖржЗ ржЪрж╛рж▓рж┐ржд</span>
            </div>
          </div>
        </div>
      </div>

      {/* Beta Warning */}
      <div className="container mx-auto px-4 py-4">
        <Alert className="border-orange-200 bg-orange-50">
          <AlertTriangle className="h-4 w-4 text-orange-600" />
          <AlertDescription className="font-['Hind_Siliguri'] text-orange-800">
            <strong>ржмрзЗржЯрж╛ рж╕ржВрж╕рзНржХрж░ржг:</strong> ржПржЗ ржЪрзНржпрж╛ржЯржмржЯржЯрж┐ ржПржЦржирзЛ ржЙржирзНржиржпрж╝ржирж╛ржзрзАржиред ржХрж┐ржЫрзБ ржЙрждрзНрждрж░ рж╕ржарж┐ржХ ржирж╛ржУ рж╣рждрзЗ ржкрж╛рж░рзЗред ржЖржкржирж╛рж░ ржорждрж╛ржоржд ржЖржорж╛ржжрзЗрж░ ржХрж╛ржЫрзЗ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг!
          </AlertDescription>
        </Alert>
      </div>

      {/* Chat Container */}
      <div className="container mx-auto px-4 pb-4 max-w-4xl">
        <Card className="h-[70vh] flex flex-col">
          <CardContent className="flex-1 p-0">
            <ScrollArea className="h-full p-4">
              <div className="space-y-4">
                <AnimatePresence>
                  {messages.map((message) => (
                    <motion.div
                      key={message.id}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -20 }}
                      className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                    >
                      <div className={`max-w-[80%] ${message.sender === 'user' ? 'ml-12' : 'mr-12'}`}>
                        <div className="flex items-start gap-2 mb-2">
                          {message.sender === 'bot' && (
                            <div className="p-1.5 bg-primary/10 rounded-full">
                              <Bot className="h-4 w-4 text-primary" />
                            </div>
                          )}
                          {message.sender === 'user' && (
                            <div className="p-1.5 bg-blue-100 rounded-full order-2">
                              <User className="h-4 w-4 text-blue-600" />
                            </div>
                          )}
                          <div className={`flex-1 ${message.sender === 'user' ? 'order-1' : ''}`}>
                            <div
                              className={`p-4 rounded-lg ${
                                message.sender === 'user'
                                  ? 'bg-blue-500 text-white'
                                  : 'bg-white border shadow-sm'
                              }`}
                            >
                              <div className="whitespace-pre-wrap font-['Hind_Siliguri'] leading-relaxed">
                                {message.content.split('**').map((part, index) => {
                                  if (index % 2 === 1) {
                                    return <strong key={index} className="font-bold text-primary">{part}</strong>;
                                  }
                                  // Handle code formatting
                                  const codeSegments = part.split('`');
                                  return codeSegments.map((codePart, codeIndex) => {
                                    if (codeIndex % 2 === 1) {
                                      return <code key={`${index}-${codeIndex}`} className="bg-muted px-1.5 py-0.5 rounded text-sm font-mono">{codePart}</code>;
                                    }
                                    return <span key={`${index}-${codeIndex}`}>{codePart}</span>;
                                  });
                                })}
                              </div>
                              {message.type && message.sender === 'bot' && (
                                <div className="flex items-center gap-1 mt-2 opacity-70">
                                  {message.type === 'solution' && <Calculator className="h-3 w-3" />}
                                  {message.type === 'history' && <History className="h-3 w-3" />}
                                  {message.type === 'explanation' && <Sparkles className="h-3 w-3" />}
                                  <span className="text-xs capitalize">
                                    {message.type === 'solution' && 'рж╕ржорж╛ржзрж╛ржи'}
                                    {message.type === 'history' && 'ржЗрждрж┐рж╣рж╛рж╕'}
                                    {message.type === 'explanation' && 'ржмрзНржпрж╛ржЦрзНржпрж╛'}
                                    {message.type === 'general' && 'рж╕рж╛ржзрж╛рж░ржг'}
                                  </span>
                                </div>
                              )}
                            </div>
                            <div className="text-xs text-muted-foreground mt-1 font-['Hind_Siliguri']">
                              {message.timestamp.toLocaleTimeString('bn-BD')}
                            </div>
                          </div>
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </AnimatePresence>
                
                {isLoading && (
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="flex justify-start"
                  >
                    <div className="max-w-[80%] mr-12">
                      <div className="flex items-start gap-2">
                        <div className="p-1.5 bg-primary/10 rounded-full">
                          <Bot className="h-4 w-4 text-primary animate-pulse" />
                        </div>
                        <div className="bg-white border shadow-sm p-4 rounded-lg">
                          <div className="flex items-center gap-2 font-['Hind_Siliguri']">
                            <div className="flex gap-1">
                              <div className="w-2 h-2 bg-primary/60 rounded-full animate-bounce" />
                              <div className="w-2 h-2 bg-primary/60 rounded-full animate-bounce delay-100" />
                              <div className="w-2 h-2 bg-primary/60 rounded-full animate-bounce delay-200" />
                            </div>
                            <span className="text-sm text-muted-foreground">ржЪрж┐ржирзНрждрж╛ ржХрж░ржЫрж┐...</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </motion.div>
                )}
                <div ref={messagesEndRef} />
              </div>
            </ScrollArea>
          </CardContent>
          
          {/* Input Area */}
          <div className="border-t p-4">
            <div className="flex gap-2">
              <Input
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="ржЖржкржирж╛рж░ ржмрзАржЬржЧржгрж┐ржд ржкрзНрж░рж╢рзНржи рж▓рж┐ржЦрзБржи... (ржЙржжрж╛рж╣рж░ржг: x + 5 = 10)"
                className="flex-1 font-['Hind_Siliguri']"
                disabled={isLoading}
              />
              <Button
                onClick={handleSendMessage}
                disabled={isLoading || !input.trim()}
                size="icon"
              >
                <Send className="h-4 w-4" />
              </Button>
            </div>
            <div className="flex items-center justify-between mt-2 text-xs text-muted-foreground font-['Hind_Siliguri']">
              <span>Enter ржЪрзЗржкрзЗ ржкрж╛ржарж╛ржи</span>
              <span>Powered by AI + Database</span>
            </div>
          </div>
        </Card>
      </div>

      {/* Quick Actions */}
      <div className="container mx-auto px-4 pb-8 max-w-4xl">
        <div className="text-center mb-4">
          <h3 className="text-lg font-semibold text-primary font-['Hind_Siliguri'] mb-2">ЁЯЪА ржжрзНрж░рзБржд рж╢рзБрж░рзБ ржХрж░рзБржи</h3>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3">
          <Button
            variant="outline"
            className="p-4 h-auto flex flex-col items-start text-left font-['Hind_Siliguri'] hover:bg-primary/5 border-primary/20"
            onClick={() => setInput("2x + 5 = 15 рж╕ржорж╛ржзрж╛ржи ржХрж░рзЛ")}
          >
            <Calculator className="h-5 w-5 mb-2 text-primary" />
            <div className="font-semibold text-sm">ЁЯзо рж░рзИржЦрж┐ржХ рж╕ржорзАржХрж░ржг</div>
            <div className="text-xs text-muted-foreground">2x + 5 = 15 рж╕ржорж╛ржзрж╛ржи</div>
          </Button>
          
          <Button
            variant="outline"
            className="p-4 h-auto flex flex-col items-start text-left font-['Hind_Siliguri'] hover:bg-primary/5 border-primary/20"
            onClick={() => setInput("x┬▓ + 3x + 2 = 0 рж╕ржорж╛ржзрж╛ржи ржХрж░рзЛ")}
          >
            <Sparkles className="h-5 w-5 mb-2 text-primary" />
            <div className="font-semibold text-sm">ЁЯУР ржжрзНржмрж┐ржШрж╛ржд рж╕ржорзАржХрж░ржг</div>
            <div className="text-xs text-muted-foreground">x┬▓ + 3x + 2 = 0</div>
          </Button>
          
          <Button
            variant="outline"
            className="p-4 h-auto flex flex-col items-start text-left font-['Hind_Siliguri'] hover:bg-primary/5 border-primary/20"
            onClick={() => setInput("ржЧрзБржгржирзАржпрж╝ржХрж░ржг ржХрзА?")}
          >
            <BookOpen className="h-5 w-5 mb-2 text-primary" />
            <div className="font-semibold text-sm">ЁЯФв ржЧрзБржгржирзАржпрж╝ржХрж░ржг</div>
            <div className="text-xs text-muted-foreground">ржзрж╛рж░ржгрж╛ ржУ ржкржжрзНржзрждрж┐</div>
          </Button>
          
          <Button
            variant="outline"
            className="p-4 h-auto flex flex-col items-start text-left font-['Hind_Siliguri'] hover:bg-primary/5 border-primary/20"
            onClick={() => setInput("ржмрзАржЬржЧржгрж┐рждрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ ржмрж▓рзЛ")}
          >
            <History className="h-5 w-5 mb-2 text-primary" />
            <div className="font-semibold text-sm">ЁЯПЫя╕П ржЗрждрж┐рж╣рж╛рж╕</div>
            <div className="text-xs text-muted-foreground">ржЖрж▓-ржЦрзЛржпрж╝рж╛рж░рж┐ржЬржорж┐ ржерзЗржХрзЗ ржЖржЬ</div>
          </Button>
        </div>
        
        {/* Database Info */}
        <div className="mt-6 text-center">
          <Card className="p-4 bg-gradient-to-r from-primary/5 to-secondary/5 border-primary/20">
            <div className="flex items-center justify-center gap-3 text-sm text-muted-foreground font-['Hind_Siliguri']">
              <Database className="h-4 w-4 text-primary" />
              <span>ЁЯУК <strong className="font-bold text-primary">{expandedAlgebraDatabase.length}+</strong> ржЯрж┐ ржмрж┐рж╖ржпрж╝ ржбрж╛ржЯрж╛ржмрзЗрж╕рзЗ рж╕ржВрж░ржХрзНрж╖рж┐ржд</span>
              <Lightbulb className="h-4 w-4 text-primary" />
              <span>ЁЯдЦ ржПржЖржЗ ржЪрж╛рж▓рж┐ржд рж╕рзНржорж╛рж░рзНржЯ рж░рзЗрж╕ржкржирзНрж╕</span>
            </div>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default AlgebraChatbot;