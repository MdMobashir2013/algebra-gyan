import { useState, useRef, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Send, Bot, User, Brain, AlertTriangle, Sparkles, Database, History, Calculator } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { AlgebraSolver } from "@/lib/algebraSolver";
import { toast } from "sonner";

interface ChatMessage {
  id: string;
  content: string;
  sender: 'user' | 'bot';
  timestamp: Date;
  type?: 'solution' | 'explanation' | 'history' | 'general';
}

interface AlgebraKnowledge {
  topic: string;
  content: string;
  examples: string[];
  keywords: string[];
}

const AlgebraChatbot = () => {
  const [messages, setMessages] = useState<ChatMessage[]>([
    {
      id: '1',
      content: '‡¶Ü‡¶∏‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ! ‡¶Ü‡¶Æ‡¶ø ‡¶¨‡ßÄ‡¶ú‡¶ó‡¶£‡¶ø‡¶§ ‡¶ú‡ßç‡¶û‡¶æ‡¶®‡ßá‡¶∞ ‡¶è‡¶Ü‡¶á ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶¨‡ßÄ‡¶ú‡¶ó‡¶£‡¶ø‡¶§ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®, ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏ ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§ ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø?',
      sender: 'bot',
      timestamp: new Date(),
      type: 'general'
    }
  ]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Extensive algebra knowledge base
  const algebraKnowledge: AlgebraKnowledge[] = [
    {
      topic: "‡¶∞‡ßà‡¶ñ‡¶ø‡¶ï ‡¶∏‡¶Æ‡ßÄ‡¶ï‡¶∞‡¶£",
      content: "‡¶∞‡ßà‡¶ñ‡¶ø‡¶ï ‡¶∏‡¶Æ‡ßÄ‡¶ï‡¶∞‡¶£ ‡¶π‡¶≤ ‡¶è‡¶Æ‡¶® ‡¶∏‡¶Æ‡ßÄ‡¶ï‡¶∞‡¶£ ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶ö‡¶≤‡¶∞‡¶æ‡¶∂‡¶ø‡¶∞ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶ò‡¶æ‡¶§ ‡ßß‡•§ ‡¶Ø‡ßá‡¶Æ‡¶®: ax + b = 0",
      examples: ["2x + 5 = 11", "3x - 7 = 8", "x/2 + 3 = 7"],
      keywords: ["‡¶∞‡ßà‡¶ñ‡¶ø‡¶ï", "linear", "‡¶∏‡¶Æ‡ßÄ‡¶ï‡¶∞‡¶£", "equation", "‡¶ò‡¶æ‡¶§", "degree"]
    },
    {
      topic: "‡¶¶‡ßç‡¶¨‡¶ø‡¶ò‡¶æ‡¶§ ‡¶∏‡¶Æ‡ßÄ‡¶ï‡¶∞‡¶£",
      content: "‡¶¶‡ßç‡¶¨‡¶ø‡¶ò‡¶æ‡¶§ ‡¶∏‡¶Æ‡ßÄ‡¶ï‡¶∞‡¶£ ‡¶π‡¶≤ ‡¶è‡¶Æ‡¶® ‡¶∏‡¶Æ‡ßÄ‡¶ï‡¶∞‡¶£ ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶ö‡¶≤‡¶∞‡¶æ‡¶∂‡¶ø‡¶∞ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶ò‡¶æ‡¶§ ‡ß®‡•§ ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶∞‡ßÇ‡¶™: ax¬≤ + bx + c = 0",
      examples: ["x¬≤ + 5x + 6 = 0", "2x¬≤ - 7x + 3 = 0", "x¬≤ - 4 = 0"],
      keywords: ["‡¶¶‡ßç‡¶¨‡¶ø‡¶ò‡¶æ‡¶§", "quadratic", "‡¶¨‡¶∞‡ßç‡¶ó", "square", "‡¶∂‡ßç‡¶∞‡ßÄ‡¶ß‡¶∞", "discriminant"]
    },
    {
      topic: "‡¶¨‡ßÄ‡¶ú‡¶ó‡¶£‡¶ø‡¶§‡ßá‡¶∞ ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏",
      content: "‡¶¨‡ßÄ‡¶ú‡¶ó‡¶£‡¶ø‡¶§ ‡¶∂‡¶¨‡ßç‡¶¶‡¶ü‡¶ø ‡¶è‡¶∏‡ßá‡¶õ‡ßá ‡¶Ü‡¶∞‡¶¨‡¶ø '‡¶Ü‡¶≤-‡¶ú‡¶æ‡¶¨‡¶∞' ‡¶•‡ßá‡¶ï‡ßá‡•§ ‡¶Ü‡¶≤-‡¶ñ‡ßã‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø‡¶ú‡¶Æ‡¶ø (‡ß≠‡ßÆ‡ß¶-‡ßÆ‡ß´‡ß¶ ‡¶ñ‡ßç‡¶∞‡¶ø.) ‡¶ï‡ßá ‡¶¨‡ßÄ‡¶ú‡¶ó‡¶£‡¶ø‡¶§‡ßá‡¶∞ ‡¶ú‡¶®‡¶ï ‡¶¨‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡•§",
      examples: ["‡¶Ü‡¶≤-‡¶ñ‡ßã‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø‡¶ú‡¶Æ‡¶ø‡¶∞ ‡¶Ö‡¶¨‡¶¶‡¶æ‡¶®", "‡¶¨‡ßç‡¶∞‡¶π‡ßç‡¶Æ‡¶ó‡ßÅ‡¶™‡ßç‡¶§‡ßá‡¶∞ ‡¶ï‡¶æ‡¶ú", "‡¶Ü‡¶∞‡ßç‡¶Ø‡¶≠‡¶ü‡ßç‡¶ü‡ßá‡¶∞ ‡¶ó‡¶£‡¶®‡¶æ"],
      keywords: ["‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏", "history", "‡¶Ü‡¶≤-‡¶ñ‡ßã‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø‡¶ú‡¶Æ‡¶ø", "al-khwarizmi", "‡¶Ü‡¶∞‡¶¨‡¶ø", "arabic"]
    },
    {
      topic: "‡¶ó‡ßÅ‡¶£‡¶®‡ßÄ‡¶Ø‡¶º‡¶ï‡¶∞‡¶£",
      content: "‡¶ó‡ßÅ‡¶£‡¶®‡ßÄ‡¶Ø‡¶º‡¶ï‡¶∞‡¶£ ‡¶π‡¶≤ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶π‡ßÅ‡¶™‡¶¶‡¶ï‡ßá ‡¶¶‡ßÅ‡¶á ‡¶¨‡¶æ ‡¶§‡¶§‡ßã‡¶ß‡¶ø‡¶ï ‡¶∏‡¶∞‡¶≤ ‡¶ó‡ßÅ‡¶£‡¶®‡ßÄ‡¶Ø‡¶º‡¶ï‡ßá‡¶∞ ‡¶ó‡ßÅ‡¶£‡¶´‡¶≤ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂ ‡¶ï‡¶∞‡¶æ‡•§",
      examples: ["x¬≤ - 4 = (x+2)(x-2)", "x¬≤ + 5x + 6 = (x+2)(x+3)", "a¬≤ - b¬≤ = (a+b)(a-b)"],
      keywords: ["‡¶ó‡ßÅ‡¶£‡¶®‡ßÄ‡¶Ø‡¶º‡¶ï‡¶∞‡¶£", "factorization", "‡¶ó‡ßÅ‡¶£‡¶®‡ßÄ‡¶Ø‡¶º‡¶ï", "factor", "‡¶¨‡¶π‡ßÅ‡¶™‡¶¶", "polynomial"]
    },
    {
      topic: "‡¶Ö‡¶®‡ßÅ‡¶™‡¶æ‡¶§ ‡¶ì ‡¶∏‡¶Æ‡¶æ‡¶®‡ßÅ‡¶™‡¶æ‡¶§",
      content: "‡¶Ö‡¶®‡ßÅ‡¶™‡¶æ‡¶§ ‡¶π‡¶≤ ‡¶¶‡ßÅ‡¶á‡¶ü‡¶ø ‡¶∞‡¶æ‡¶∂‡¶ø‡¶∞ ‡¶§‡ßÅ‡¶≤‡¶®‡¶æ‡•§ a:b = c:d ‡¶π‡¶≤‡ßá ‡¶è‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶æ‡¶®‡ßÅ‡¶™‡¶æ‡¶§, ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá a√ód = b√óc",
      examples: ["3:4 = 6:8", "x:5 = 4:10", "2:3 = 8:12"],
      keywords: ["‡¶Ö‡¶®‡ßÅ‡¶™‡¶æ‡¶§", "ratio", "‡¶∏‡¶Æ‡¶æ‡¶®‡ßÅ‡¶™‡¶æ‡¶§", "proportion", "‡¶§‡ßÅ‡¶≤‡¶®‡¶æ", "comparison"]
    },
    {
      topic: "‡¶¨‡ßÄ‡¶ú‡¶ó‡¶£‡¶ø‡¶§‡ßÄ‡¶Ø‡¶º ‡¶∏‡ßÇ‡¶§‡ßç‡¶∞",
      content: "‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶∏‡ßÇ‡¶§‡ßç‡¶∞‡¶∏‡¶Æ‡ßÇ‡¶π: (a+b)¬≤ = a¬≤ + 2ab + b¬≤, (a-b)¬≤ = a¬≤ - 2ab + b¬≤, a¬≤ - b¬≤ = (a+b)(a-b)",
      examples: ["(x+3)¬≤ = x¬≤ + 6x + 9", "(2x-1)¬≤ = 4x¬≤ - 4x + 1", "x¬≤ - 9 = (x+3)(x-3)"],
      keywords: ["‡¶∏‡ßÇ‡¶§‡ßç‡¶∞", "formula", "‡¶¨‡¶∞‡ßç‡¶ó", "square", "‡¶ò‡¶®", "cube", "‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡ßÉ‡¶§‡¶ø", "expansion"]
    }
  ];

  const handleSendMessage = async () => {
    if (!input.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      content: input.trim(),
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInput("");
    setIsLoading(true);

    // Simulate processing time
    setTimeout(() => {
      const response = generateBotResponse(input.trim());
      const botMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        content: response.content,
        sender: 'bot',
        timestamp: new Date(),
        type: response.type
      };

      setMessages(prev => [...prev, botMessage]);
      setIsLoading(false);
    }, 1000 + Math.random() * 2000);
  };

  const generateBotResponse = (userInput: string): { content: string; type: ChatMessage['type'] } => {
    const input = userInput.toLowerCase();

    // Check if it's a math problem that needs solving
    if (input.includes('=') || input.includes('‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®') || input.includes('solve')) {
      try {
        const solution = AlgebraSolver.solve(userInput);
        return {
          content: `üîç **‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®:**\n\n**‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:** ${userInput}\n\n**‡¶ß‡¶æ‡¶™‡¶∏‡¶Æ‡ßÇ‡¶π:**\n${solution.steps.join('\n')}\n\n**‡¶â‡¶§‡ßç‡¶§‡¶∞:** ${solution.solution}\n\n**‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:** ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ${solution.type} ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ${solution.variable} ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶® ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø‡•§`,
          type: 'solution'
        };
      } catch (error) {
        return {
          content: `‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶á ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: "x + 5 = 10" ‡¶¨‡¶æ "2x¬≤ - 8 = 0"`,
          type: 'general'
        };
      }
    }

    // Search through knowledge base
    for (const knowledge of algebraKnowledge) {
      const found = knowledge.keywords.some(keyword => 
        input.includes(keyword.toLowerCase())
      );
      
      if (found) {
        const examples = knowledge.examples.join('\n‚Ä¢ ');
        return {
          content: `üìö **${knowledge.topic}**\n\n${knowledge.content}\n\n**‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£‡¶∏‡¶Æ‡ßÇ‡¶π:**\n‚Ä¢ ${examples}\n\n‡¶Ü‡¶∞‡ßã ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶®?`,
          type: 'explanation'
        };
      }
    }

    // History-related responses
    if (input.includes('‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏') || input.includes('history') || input.includes('‡¶ï‡ßá ‡¶Ü‡¶¨‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞')) {
      return {
        content: `üèõÔ∏è **‡¶¨‡ßÄ‡¶ú‡¶ó‡¶£‡¶ø‡¶§‡ßá‡¶∞ ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏**\n\n‚Ä¢ **‡¶Ü‡¶≤-‡¶ñ‡ßã‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø‡¶ú‡¶Æ‡¶ø (‡ß≠‡ßÆ‡ß¶-‡ßÆ‡ß´‡ß¶):** ‡¶¨‡ßÄ‡¶ú‡¶ó‡¶£‡¶ø‡¶§‡ßá‡¶∞ ‡¶ú‡¶®‡¶ï\n‚Ä¢ **‡¶¨‡ßç‡¶∞‡¶π‡ßç‡¶Æ‡¶ó‡ßÅ‡¶™‡ßç‡¶§ (‡ß¨‡ß®‡ßÆ-‡ß¨‡ß¨‡ßÆ):** ‡¶∂‡ßÇ‡¶®‡ßç‡¶Ø‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞\n‚Ä¢ **‡¶Ü‡¶∞‡ßç‡¶Ø‡¶≠‡¶ü‡ßç‡¶ü (‡ß™‡ß≠‡ß¨-‡ß´‡ß´‡ß¶):** ‡¶≠‡¶æ‡¶∞‡¶§‡ßÄ‡¶Ø‡¶º ‡¶ó‡¶£‡¶ø‡¶§‡¶¨‡¶ø‡¶¶\n‚Ä¢ **‡¶Ü‡¶≤-‡¶ú‡¶æ‡¶¨‡¶∞:** ‡¶¨‡ßÄ‡¶ú‡¶ó‡¶£‡¶ø‡¶§ ‡¶∂‡¶¨‡ßç‡¶¶‡ßá‡¶∞ ‡¶â‡ßé‡¶∏ (‡¶Ü‡¶∞‡¶¨‡¶ø)\n\n‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶ú‡¶æ‡¶®‡¶§‡ßá "‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏" ‡¶ü‡ßç‡¶Ø‡¶æ‡¶¨‡ßá ‡¶Ø‡¶æ‡¶®!`,
        type: 'history'
      };
    }

    // Default responses
    const defaultResponses = [
      "‡¶¶‡ßÅ‡¶∞‡ßç‡¶¶‡¶æ‡¶®‡ßç‡¶§ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®! ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶¨‡ßÄ‡¶ú‡¶ó‡¶£‡¶ø‡¶§ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®, ‡¶∏‡ßÇ‡¶§‡ßç‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßÄ‡¶ï‡¶∞‡¶£ ‡¶¶‡¶ø‡¶® ‡¶¨‡¶æ ‡¶ï‡ßã‡¶® ‡¶ü‡¶™‡¶ø‡¶ï ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶® ‡¶¨‡¶≤‡ßÅ‡¶®‡•§",
      "‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶õ‡¶ø ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø! ‡¶∞‡ßà‡¶ñ‡¶ø‡¶ï ‡¶∏‡¶Æ‡ßÄ‡¶ï‡¶∞‡¶£, ‡¶¶‡ßç‡¶¨‡¶ø‡¶ò‡¶æ‡¶§ ‡¶∏‡¶Æ‡ßÄ‡¶ï‡¶∞‡¶£, ‡¶ó‡ßÅ‡¶£‡¶®‡ßÄ‡¶Ø‡¶º‡¶ï‡¶∞‡¶£ - ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
      "‡¶¨‡ßÄ‡¶ú‡¶ó‡¶£‡¶ø‡¶§ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶ï‡ßã‡¶® ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º ‡¶Ü‡¶õ‡ßá‡¶®? ‡¶Ü‡¶Æ‡¶ø ‡¶ß‡¶æ‡¶™‡ßá ‡¶ß‡¶æ‡¶™‡ßá ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ì ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§",
      "‡¶ï‡ßÄ ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶®? ‡¶∏‡¶Æ‡ßÄ‡¶ï‡¶∞‡¶£ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®, ‡¶∏‡ßÇ‡¶§‡ßç‡¶∞, ‡¶®‡¶æ‡¶ï‡¶ø ‡¶¨‡ßÄ‡¶ú‡¶ó‡¶£‡¶ø‡¶§‡ßá‡¶∞ ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏?"
    ];

    return {
      content: defaultResponses[Math.floor(Math.random() * defaultResponses.length)],
      type: 'general'
    };
  };

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-primary/5 to-secondary/10">
      {/* Header */}
      <div className="border-b bg-white/80 backdrop-blur-sm sticky top-0 z-10">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              className="flex items-center gap-3"
            >
              <div className="p-2 bg-primary/10 rounded-full">
                <Brain className="h-6 w-6 text-primary" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-primary font-['Hind_Siliguri']">
                  ‡¶¨‡ßÄ‡¶ú‡¶ó‡¶£‡¶ø‡¶§ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü
                </h1>
                <div className="flex items-center gap-2">
                  <Badge variant="secondary" className="text-xs font-['Hind_Siliguri']">
                    ‡¶¨‡ßá‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶∏‡ßç‡¶ï‡¶∞‡¶£
                  </Badge>
                  <Badge variant="outline" className="text-xs font-['Hind_Siliguri']">
                    ‡¶ï‡¶æ‡¶ú ‡¶ö‡¶≤‡¶Æ‡¶æ‡¶®
                  </Badge>
                </div>
              </div>
            </motion.div>
            
            <div className="flex items-center gap-2 text-sm text-muted-foreground font-['Hind_Siliguri']">
              <Database className="h-4 w-4" />
              <span>‡¶è‡¶Ü‡¶á ‡¶ö‡¶æ‡¶≤‡¶ø‡¶§</span>
            </div>
          </div>
        </div>
      </div>

      {/* Beta Warning */}
      <div className="container mx-auto px-4 py-4">
        <Alert className="border-orange-200 bg-orange-50">
          <AlertTriangle className="h-4 w-4 text-orange-600" />
          <AlertDescription className="font-['Hind_Siliguri'] text-orange-800">
            <strong>‡¶¨‡ßá‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶∏‡ßç‡¶ï‡¶∞‡¶£:</strong> ‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü‡¶ü‡¶ø ‡¶è‡¶ñ‡¶®‡ßã ‡¶â‡¶®‡ßç‡¶®‡¶Ø‡¶º‡¶®‡¶æ‡¶ß‡ßÄ‡¶®‡•§ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶æ‡¶ì ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡¶§‡¶æ‡¶Æ‡¶§ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£!
          </AlertDescription>
        </Alert>
      </div>

      {/* Chat Container */}
      <div className="container mx-auto px-4 pb-4 max-w-4xl">
        <Card className="h-[70vh] flex flex-col">
          <CardContent className="flex-1 p-0">
            <ScrollArea className="h-full p-4">
              <div className="space-y-4">
                <AnimatePresence>
                  {messages.map((message) => (
                    <motion.div
                      key={message.id}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -20 }}
                      className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                    >
                      <div className={`max-w-[80%] ${message.sender === 'user' ? 'ml-12' : 'mr-12'}`}>
                        <div className="flex items-start gap-2 mb-2">
                          {message.sender === 'bot' && (
                            <div className="p-1.5 bg-primary/10 rounded-full">
                              <Bot className="h-4 w-4 text-primary" />
                            </div>
                          )}
                          {message.sender === 'user' && (
                            <div className="p-1.5 bg-blue-100 rounded-full order-2">
                              <User className="h-4 w-4 text-blue-600" />
                            </div>
                          )}
                          <div className={`flex-1 ${message.sender === 'user' ? 'order-1' : ''}`}>
                            <div
                              className={`p-4 rounded-lg ${
                                message.sender === 'user'
                                  ? 'bg-blue-500 text-white'
                                  : 'bg-white border shadow-sm'
                              }`}
                            >
                              <div className="whitespace-pre-wrap font-['Hind_Siliguri']">
                                {message.content}
                              </div>
                              {message.type && message.sender === 'bot' && (
                                <div className="flex items-center gap-1 mt-2 opacity-70">
                                  {message.type === 'solution' && <Calculator className="h-3 w-3" />}
                                  {message.type === 'history' && <History className="h-3 w-3" />}
                                  {message.type === 'explanation' && <Sparkles className="h-3 w-3" />}
                                  <span className="text-xs capitalize">
                                    {message.type === 'solution' && '‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®'}
                                    {message.type === 'history' && '‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏'}
                                    {message.type === 'explanation' && '‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ'}
                                    {message.type === 'general' && '‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£'}
                                  </span>
                                </div>
                              )}
                            </div>
                            <div className="text-xs text-muted-foreground mt-1 font-['Hind_Siliguri']">
                              {message.timestamp.toLocaleTimeString('bn-BD')}
                            </div>
                          </div>
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </AnimatePresence>
                
                {isLoading && (
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="flex justify-start"
                  >
                    <div className="max-w-[80%] mr-12">
                      <div className="flex items-start gap-2">
                        <div className="p-1.5 bg-primary/10 rounded-full">
                          <Bot className="h-4 w-4 text-primary animate-pulse" />
                        </div>
                        <div className="bg-white border shadow-sm p-4 rounded-lg">
                          <div className="flex items-center gap-2 font-['Hind_Siliguri']">
                            <div className="flex gap-1">
                              <div className="w-2 h-2 bg-primary/60 rounded-full animate-bounce" />
                              <div className="w-2 h-2 bg-primary/60 rounded-full animate-bounce delay-100" />
                              <div className="w-2 h-2 bg-primary/60 rounded-full animate-bounce delay-200" />
                            </div>
                            <span className="text-sm text-muted-foreground">‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶õ‡¶ø...</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </motion.div>
                )}
                <div ref={messagesEndRef} />
              </div>
            </ScrollArea>
          </CardContent>
          
          {/* Input Area */}
          <div className="border-t p-4">
            <div className="flex gap-2">
              <Input
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßÄ‡¶ú‡¶ó‡¶£‡¶ø‡¶§ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®... (‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: x + 5 = 10)"
                className="flex-1 font-['Hind_Siliguri']"
                disabled={isLoading}
              />
              <Button
                onClick={handleSendMessage}
                disabled={isLoading || !input.trim()}
                size="icon"
              >
                <Send className="h-4 w-4" />
              </Button>
            </div>
            <div className="flex items-center justify-between mt-2 text-xs text-muted-foreground font-['Hind_Siliguri']">
              <span>Enter ‡¶ö‡ßá‡¶™‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®</span>
              <span>Powered by AI + Database</span>
            </div>
          </div>
        </Card>
      </div>

      {/* Quick Actions */}
      <div className="container mx-auto px-4 pb-8 max-w-4xl">
        <div className="text-center mb-4">
          <h3 className="text-lg font-semibold text-primary font-['Hind_Siliguri'] mb-2">
            ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
          </h3>
        </div>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
          {[
            { text: "x + 5 = 10", desc: "‡¶∞‡ßà‡¶ñ‡¶ø‡¶ï ‡¶∏‡¶Æ‡ßÄ‡¶ï‡¶∞‡¶£" },
            { text: "x¬≤ - 4 = 0", desc: "‡¶¶‡ßç‡¶¨‡¶ø‡¶ò‡¶æ‡¶§ ‡¶∏‡¶Æ‡ßÄ‡¶ï‡¶∞‡¶£" },
            { text: "‡¶¨‡ßÄ‡¶ú‡¶ó‡¶£‡¶ø‡¶§‡ßá‡¶∞ ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏", desc: "‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏ ‡¶ú‡¶æ‡¶®‡ßÅ‡¶®" },
            { text: "‡¶ó‡ßÅ‡¶£‡¶®‡ßÄ‡¶Ø‡¶º‡¶ï‡¶∞‡¶£ ‡¶ï‡ßÄ?", desc: "‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶™‡¶æ‡¶®" }
          ].map((item, index) => (
            <Button
              key={index}
              variant="outline"
              size="sm"
              className="h-auto p-3 text-left font-['Hind_Siliguri']"
              onClick={() => setInput(item.text)}
            >
              <div>
                <div className="font-medium text-sm">{item.text}</div>
                <div className="text-xs text-muted-foreground">{item.desc}</div>
              </div>
            </Button>
          ))}
        </div>
      </div>
    </div>
  );
};

export default AlgebraChatbot;