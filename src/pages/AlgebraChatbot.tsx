import { useState, useRef, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Send, Bot, User, Brain, AlertTriangle, Sparkles, Database, History, Calculator, BookOpen, Lightbulb, Target, Zap, Star, ChevronDown, ChevronUp } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { EnhancedAlgebraSolver } from "@/lib/enhancedAlgebraSolver";
import { algebraKnowledge, mathFormulas, historicalFacts, solvingStrategies } from "@/lib/algebraDatabase";
import { toast } from "sonner";

interface ChatMessage {
  id: string;
  content: string;
  sender: 'user' | 'bot';
  timestamp: Date;
  type?: 'solution' | 'explanation' | 'history' | 'general' | 'formula' | 'interactive';
  metadata?: {
    difficulty?: number;
    category?: string;
    relatedTopics?: string[];
    hasMore?: boolean;
  };
}

interface AlgebraKnowledge {
  topic: string;
  content: string;
  examples: string[];
  keywords: string[];
}

const AlgebraChatbot = () => {
  const [messages, setMessages] = useState<ChatMessage[]>([
    {
      id: '1',
      content: 'ЁЯОУ **ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо! ржмрзАржЬржЧржгрж┐ржд ржЬрзНржЮрж╛ржирзЗ рж╕рзНржмрж╛ржЧрждржо!**\n\nржЖржорж┐ ржЖржкржирж╛рж░ ржмрзБржжрзНржзрж┐ржорж╛ржи ржПржЖржЗ рж╕рж╣рж╛ржпрж╝ржХред ржЖржорж┐ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐:\n\nЁЯзо **рж╕ржорж╕рзНржпрж╛ рж╕ржорж╛ржзрж╛ржи:** рж░рзИржЦрж┐ржХ, ржжрзНржмрж┐ржШрж╛ржд, ржЕрж╕ржорждрж╛, ржЕржирзБржкрж╛ржд\nЁЯУЪ **ржмрж┐рж╕рзНрждрзГржд ржмрзНржпрж╛ржЦрзНржпрж╛:** ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ рж╕ржорж╛ржзрж╛ржи ржУ ржзрж╛рж░ржгрж╛\nЁЯПЫя╕П **ржЧржгрж┐рждрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕:** ржорж╣рж╛ржи ржЧржгрж┐рждржмрж┐ржжржжрзЗрж░ ржЕржмржжрж╛ржи\nЁЯУЦ **рж╕рзВрждрзНрж░ ржУ рж╕ржВржЬрзНржЮрж╛:** рж╕ржорзНржкрзВрж░рзНржг ржбрж╛ржЯрж╛ржмрзЗрж╕ рж╕рж╣\nЁЯТб **рж╕рзНржорж╛рж░рзНржЯ ржЯрж┐ржкрж╕:** рж╢рзЗржЦрж╛рж░ ржХрзМрж╢рж▓ ржУ ржЯрзНрж░рж┐ржХрж╕\n\nржХрзА ржЬрж╛ржирждрзЗ ржЪрж╛ржи? ржПржХржЯрж┐ рж╕ржорзАржХрж░ржг ржжрж┐ржи ржмрж╛ ржХрзЛржи ржЯржкрж┐ржХ ржирж┐ржпрж╝рзЗ ржЖрж▓рзЛржЪржирж╛ ржХрж░рждрзЗ ржЪрж╛ржи!',
      sender: 'bot',
      timestamp: new Date(),
      type: 'general',
      metadata: {
        category: 'welcome',
        hasMore: true
      }
    }
  ]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [showSidebar, setShowSidebar] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Enhanced knowledge base with comprehensive topics
  const quickTopics = [
    { title: "рж░рзИржЦрж┐ржХ рж╕ржорзАржХрж░ржг", icon: "ЁЯУП", keywords: ["linear", "рж░рзИржЦрж┐ржХ"] },
    { title: "ржжрзНржмрж┐ржШрж╛ржд рж╕ржорзАржХрж░ржг", icon: "ЁЯУР", keywords: ["quadratic", "ржжрзНржмрж┐ржШрж╛ржд"] },
    { title: "ржЧрзБржгржирзАржпрж╝ржХрж░ржг", icon: "тЬВя╕П", keywords: ["factor", "ржЧрзБржгржирзАржпрж╝ржХ"] },
    { title: "ржмрзАржЬржЧржгрж┐рждрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕", icon: "ЁЯПЫя╕П", keywords: ["history", "ржЗрждрж┐рж╣рж╛рж╕"] },
    { title: "рж╕рзВрждрзНрж░рж╕ржорзВрж╣", icon: "ЁЯУЛ", keywords: ["formula", "рж╕рзВрждрзНрж░"] },
    { title: "ржЕрж╕ржорждрж╛", icon: "тЪЦя╕П", keywords: ["inequality", "ржЕрж╕ржорждрж╛"] }
  ];

  const handleSendMessage = async () => {
    if (!input.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      content: input.trim(),
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInput("");
    setIsLoading(true);

    // Simulate more intelligent processing time based on complexity
    const complexity = Math.min(input.length / 10, 3);
    const processingTime = 1500 + (complexity * 1000) + Math.random() * 1500;

    setTimeout(() => {
      const response = generateEnhancedBotResponse(input.trim());
      const botMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        content: response.content,
        sender: 'bot',
        timestamp: new Date(),
        type: response.type,
        metadata: response.metadata
      };

      setMessages(prev => [...prev, botMessage]);
      setIsLoading(false);
      
      // Show success toast for solutions
      if (response.type === 'solution') {
        toast.success("рж╕ржорж╛ржзрж╛ржи ржкрзНрж░рж╕рзНрждрзБржд! ЁЯОп");
      }
    }, processingTime);
  };

  const generateEnhancedBotResponse = (userInput: string): { 
    content: string; 
    type: ChatMessage['type']; 
    metadata?: ChatMessage['metadata'] 
  } => {
    const input = userInput.toLowerCase();

    // Enhanced problem-solving with detailed steps
    if (input.includes('=') || input.includes('рж╕ржорж╛ржзрж╛ржи') || input.includes('solve')) {
      try {
        const solution = EnhancedAlgebraSolver.solve(userInput);
        
        let content = `ЁЯОп **${solution.type} рж╕ржорж╛ржзрж╛ржи**\n\n`;
        content += `**рж╕ржорж╕рзНржпрж╛:** ${userInput}\n\n`;
        content += `**ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рж╕ржорж╛ржзрж╛ржи:**\n`;
        solution.steps.forEach((step, index) => {
          content += `${index + 1}. ${step}\n`;
        });
        content += `\n**тЬЕ ржЪрзВржбрж╝рж╛ржирзНржд ржЙрждрзНрждрж░:** ${solution.solution}\n\n`;
        content += `**ЁЯФН ржпрж╛ржЪрж╛ржЗржХрж░ржг:** ${solution.verification}\n\n`;
        
        if (solution.restrictions) {
          content += `**тЪая╕П рж╢рж░рзНржд:** ${solution.restrictions}\n\n`;
        }
        
        if (solution.graphDescription) {
          content += `**ЁЯУК ржЧрзНрж░рж╛ржлрж┐ржХрзНржпрж╛рж▓ ржмрж░рзНржгржирж╛:** ${solution.graphDescription}\n\n`;
        }
        
        if (solution.alternativeMethod) {
          content += `**ЁЯФД ржмрж┐ржХрж▓рзНржк ржкржжрзНржзрждрж┐:** ${solution.alternativeMethod}\n\n`;
        }
        
        content += `**ЁЯТб ржЯрж┐ржкрж╕:**\n`;
        solution.hints.forEach((hint, index) => {
          content += `тАв ${hint}\n`;
        });
        
        const difficultyStars = 'тнР'.repeat(solution.difficulty);
        content += `\n**ЁЯОЪя╕П ржХржарж┐ржирждрж╛:** ${difficultyStars} (${solution.difficulty}/5)`;

        return {
          content,
          type: 'solution',
          metadata: {
            difficulty: solution.difficulty,
            category: solution.type,
            hasMore: true
          }
        };
      } catch (error) {
        return {
          content: `тЭМ **рж╕ржорж╕рзНржпрж╛ рж╕ржорж╛ржзрж╛ржирзЗ рждрзНрж░рзБржЯрж┐**\n\nржжрзБржГржЦрж┐ржд, ржПржЗ рж╕ржорж╕рзНржпрж╛ржЯрж┐ рж╕ржорж╛ржзрж╛ржи ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред\n\n**ЁЯТб рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржЬржирзНржп:**\nтАв рж╕ржорзАржХрж░ржгржЯрж┐ рж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯрзЗ рж▓рж┐ржЦрзБржи\nтАв ржЙржжрж╛рж╣рж░ржг: "2x + 5 = 11" ржмрж╛ "x┬▓ - 4 = 0"\nтАв ржмрж╛ржВрж▓рж╛ ржмрж╛ ржЗржВрж░рзЗржЬрж┐ ржЙржнржпрж╝ржЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи\n\n**ЁЯОп рж╕рж╛ржкрзЛрж░рзНржЯрзЗржб рж╕ржорж╕рзНржпрж╛:**\nтАв рж░рзИржЦрж┐ржХ рж╕ржорзАржХрж░ржг (x + 5 = 10)\nтАв ржжрзНржмрж┐ржШрж╛ржд рж╕ржорзАржХрж░ржг (x┬▓ + 2x - 3 = 0)\nтАв ржЕрж╕ржорждрж╛ (x > 5)\nтАв ржЕржирзБржкрж╛ржд (3:4 = x:8)`,
          type: 'general'
        };
      }
    }

    // Enhanced knowledge base search
    for (const knowledge of algebraKnowledge) {
      const found = knowledge.keywords.some(keyword => 
        input.includes(keyword.toLowerCase())
      );
      
      if (found) {
        const difficultyStars = 'тнР'.repeat(knowledge.difficulty);
        const examples = knowledge.examples.join('\nтАв ');
        
        let content = `ЁЯУЪ **${knowledge.topic}** ${difficultyStars}\n\n`;
        content += `**ЁЯУЦ рж╕ржВржЬрзНржЮрж╛:** ${knowledge.content}\n\n`;
        content += `**ЁЯФв ржЙржжрж╛рж╣рж░ржгрж╕ржорзВрж╣:**\nтАв ${examples}\n\n`;
        
        if (knowledge.relatedTopics.length > 0) {
          content += `**ЁЯФЧ рж╕ржорзНржкрж░рзНржХрж┐ржд ржмрж┐рж╖ржпрж╝:** ${knowledge.relatedTopics.join(', ')}\n\n`;
        }
        
        content += `**ЁЯТб ржЖрж░рзЛ ржЬрж╛ржирждрзЗ:** ржПржЗ ржмрж┐рж╖ржпрж╝рзЗ ржХрзЛржи ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржкрзНрж░рж╢рзНржи ржЖржЫрзЗ?`;

        return {
          content,
          type: 'explanation',
          metadata: {
            difficulty: knowledge.difficulty,
            category: knowledge.category,
            relatedTopics: knowledge.relatedTopics,
            hasMore: true
          }
        };
      }
    }

    // Formula search
    for (const formula of mathFormulas) {
      if (input.includes(formula.name.toLowerCase()) || 
          Object.keys(formula.variables).some(key => input.includes(key))) {
        
        let content = `ЁЯУР **${formula.name}**\n\n`;
        content += `**ЁЯФв рж╕рзВрждрзНрж░:** ${formula.formula}\n\n`;
        content += `**ЁЯУЭ ржмрж░рзНржгржирж╛:** ${formula.description}\n\n`;
        content += `**ЁЯФд ржЪрж▓рж░рж╛рж╢рж┐:**\n`;
        Object.entries(formula.variables).forEach(([key, value]) => {
          content += `тАв ${key} = ${value}\n`;
        });
        content += `\n**ЁЯОп ржЙржжрж╛рж╣рж░ржг:**\nтАв ${formula.examples.join('\nтАв ')}\n\n`;
        content += `**ЁЯУВ ржмрж┐ржнрж╛ржЧ:** ${formula.category}`;

        return {
          content,
          type: 'formula',
          metadata: {
            category: formula.category,
            hasMore: true
          }
        };
      }
    }

    // Historical facts with enhanced details
    if (input.includes('ржЗрждрж┐рж╣рж╛рж╕') || input.includes('history') || 
        input.includes('ржХрзЗ ржЖржмрж┐рж╖рзНржХрж╛рж░') || input.includes('ржЬржиржХ')) {
      
      let content = `ЁЯПЫя╕П **ржмрзАржЬржЧржгрж┐рждрзЗрж░ ржорж╣рж╛ржи ржмрзНржпржХрзНрждрж┐рждрзНржм**\n\n`;
      
      historicalFacts.forEach((fact, index) => {
        content += `**${index + 1}. ${fact.person}** (${fact.period})\n`;
        content += `ЁЯОп **ржЕржмржжрж╛ржи:** ${fact.contribution}\n`;
        content += `ЁЯУЬ **ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд:** ${fact.details}\n`;
        content += `ЁЯМЯ **ржкрзНрж░ржнрж╛ржм:** ${fact.impact}\n\n`;
      });
      
      content += `**ЁЯФН ржЖрж░рзЛ ржЬрж╛ржирждрзЗ:** ржХрзЛржи ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржмрзНржпржХрзНрждрж┐рждрзНржм рж╕ржорзНржкрж░рзНржХрзЗ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЬрж╛ржирждрзЗ ржЪрж╛ржи?`;

      return {
        content,
        type: 'history',
        metadata: {
          category: 'ржЗрждрж┐рж╣рж╛рж╕',
          hasMore: true
        }
      };
    }

    // Enhanced strategy suggestions
    if (input.includes('ржХрж┐ржнрж╛ржмрзЗ') || input.includes('ржкржжрзНржзрждрж┐') || 
        input.includes('strategy') || input.includes('ржЯрж┐ржкрж╕')) {
      
      let content = `ЁЯТб **рж╕ржорж╛ржзрж╛ржирзЗрж░ ржХрзМрж╢рж▓ ржУ ржЯрж┐ржкрж╕**\n\n`;
      
      solvingStrategies.forEach((strategy, index) => {
        content += `**${index + 1}. ${strategy.type}**\n`;
        strategy.steps.forEach((step, stepIndex) => {
          content += `   ${stepIndex + 1}. ${step}\n`;
        });
        content += `\n`;
      });
      
      content += `**ЁЯОп рж╕рж╛ржзрж╛рж░ржг ржЯрж┐ржкрж╕:**\n`;
      content += `тАв рж╕рж░рзНржмржжрж╛ рж╕ржорзАржХрж░ржгржЯрж┐ рж╕рж░рж▓ ржХрж░рзБржи\n`;
      content += `тАв ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржПржЧрж┐ржпрж╝рзЗ ржпрж╛ржи\n`;
      content += `тАв рж╕ржорж╛ржзрж╛ржирзЗрж░ ржкрж░ ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи\n`;
      content += `тАв ржЕржирзБрж╢рзАрж▓ржи ржХрж░рждрзЗ ржерж╛ржХрзБржи\n\n`;
      content += `**ЁЯдФ ржХрзЛржи ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕ржорж╕рзНржпрж╛ржпрж╝ ржЖржЯржХрзЗ ржЖржЫрзЗржи?**`;

      return {
        content,
        type: 'explanation',
        metadata: {
          category: 'ржХрзМрж╢рж▓',
          hasMore: true
        }
      };
    }

    // Smart contextual responses
    const smartResponses = [
      {
        content: `ЁЯдЦ **рж╕рзНржорж╛рж░рзНржЯ рж╕рж╣рж╛ржпрж╝рждрж╛ ржкрзНрж░рж╕рзНрждрзБржд!**\n\nржЖржорж┐ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐:\n\nЁЯзо **рждрж╛рзОржХрзНрж╖ржгрж┐ржХ рж╕ржорж╛ржзрж╛ржи:** ржпрзЗржХрзЛржирзЛ ржмрзАржЬржЧржгрж┐ржд рж╕ржорж╕рзНржпрж╛\nЁЯУЪ **ржЧржнрзАрж░ ржмрзНржпрж╛ржЦрзНржпрж╛:** ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ рж╢рж┐ржХрзНрж╖рж╛\nЁЯПЖ **ржкрж╛рж░ржжрж░рзНрж╢рзА ржЯрж┐ржкрж╕:** ржжрзНрж░рзБржд рж╕ржорж╛ржзрж╛ржирзЗрж░ ржХрзМрж╢рж▓\nЁЯОп **ржмрзНржпржХрзНрждрж┐ржЧржд рж╢рж┐ржХрзНрж╖рж╛:** ржЖржкржирж╛рж░ ржкрзНрж░ржпрж╝рзЛржЬржи ржЕржирзБржпрж╛ржпрж╝рзА\n\n**ЁЯТн ржХрзА ржирж┐ржпрж╝рзЗ ржХрж╛ржЬ ржХрж░рждрзЗ ржЪрж╛ржи?**`,
        type: 'general' as const
      },
      {
        content: `ЁЯУЦ **ржмрзАржЬржЧржгрж┐ржд рж╢рзЗржЦрж╛рж░ ржпрж╛рждрзНрж░рж╛ржпрж╝ рж╕рзНржмрж╛ржЧрждржо!**\n\nржЖржорж╛рж░ ржХрж╛ржЫрзЗ ржЖржЫрзЗ:\nтАв **рзлрзжрзж+** рж╕ржорж╕рзНржпрж╛рж░ рж╕ржорж╛ржзрж╛ржи ржХрзМрж╢рж▓\nтАв **рззрзжрзж+** рж╕рзВрждрзНрж░ ржУ рж╕ржВржЬрзНржЮрж╛\nтАв **ржмрж┐рж╕рзНрждрзГржд** ржЗрждрж┐рж╣рж╛рж╕ ржУ рждржерзНржп\nтАв **ржЗржирзНржЯрж╛рж░рзЗржХрзНржЯрж┐ржн** рж╢рж┐ржХрзНрж╖рж╛ ржкржжрзНржзрждрж┐\n\n**ЁЯОк ржПржХржЯрж┐ рж╕ржорзАржХрж░ржг ржжрж┐ржи ржмрж╛ ржкрзНрж░рж╢рзНржи ржХрж░рзБржи!**`,
        type: 'general' as const
      },
      {
        content: `ЁЯОи **ржЖржкржирж╛рж░ ржмрзНржпржХрзНрждрж┐ржЧржд ржЧржгрж┐ржд рж╢рж┐ржХрзНрж╖ржХ!**\n\nржмрж┐рж╢рзЗрж╖рждрзНржм:\nЁЯФм **ржмрзИржЬрзНржЮрж╛ржирж┐ржХ ржкржжрзНржзрждрж┐:** ржкрзНрж░ржорж╛ржгрж╕рж╣ рж╕ржорж╛ржзрж╛ржи\nЁЯОп **рж▓ржХрзНрж╖рзНржпржнрж┐рждрзНрждрж┐ржХ:** ржЖржкржирж╛рж░ рж╕рзНрждрж░ ржЕржирзБржпрж╛ржпрж╝рзА\nтЪб **ржжрзНрж░рзБржд ржУ ржирж┐рж░рзНржнрзБрж▓:** рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржлрж▓рж╛ржлрж▓\nЁЯМЯ **ржЙрзОрж╕рж╛рж╣ржмрзНржпржЮрзНржЬржХ:** рж╢рзЗржЦрж╛ ржЖржиржирзНржжржжрж╛ржпрж╝ржХ ржХрж░рж┐\n\n**ЁЯЪА ржЖрж╕рзБржи рж╢рзБрж░рзБ ржХрж░рж┐!**`,
        type: 'general' as const
      }
    ];

    const randomResponse = smartResponses[Math.floor(Math.random() * smartResponses.length)];
    return {
      content: randomResponse.content,
      type: randomResponse.type,
      metadata: {
        category: 'рж╕рзНржорж╛рж░рзНржЯ рж╕рж╛рж╣рж╛ржпрзНржп',
        hasMore: true
      }
    };
  };

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleQuickTopic = (topic: string) => {
    setInput(`${topic} рж╕ржорзНржкрж░рзНржХрзЗ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЬрж╛ржирждрзЗ ржЪрж╛ржЗ`);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-primary/5 to-secondary/10">
      {/* Enhanced Header */}
      <div className="border-b bg-white/90 backdrop-blur-md sticky top-0 z-10 shadow-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              className="flex items-center gap-3"
            >
              <div className="relative">
                <div className="p-2 bg-gradient-to-br from-primary to-primary/80 rounded-full">
                  <Brain className="h-6 w-6 text-white" />
                </div>
                <motion.div
                  animate={{ scale: [1, 1.2, 1] }}
                  transition={{ duration: 2, repeat: Infinity }}
                  className="absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full"
                />
              </div>
              <div>
                <h1 className="text-xl font-bold text-primary font-['Hind_Siliguri']">
                  ржмрзАржЬржЧржгрж┐ржд ржЪрзНржпрж╛ржЯржмржЯ ЁЯдЦ
                </h1>
                <div className="flex items-center gap-2">
                  <Badge variant="secondary" className="text-xs font-['Hind_Siliguri'] animate-pulse">
                    ЁЯзк ржмрзЗржЯрж╛ рж╕ржВрж╕рзНржХрж░ржг
                  </Badge>
                  <Badge variant="outline" className="text-xs font-['Hind_Siliguri']">
                    ЁЯФз ржХрж╛ржЬ ржЪрж▓ржорж╛ржи
                  </Badge>
                  <Badge variant="default" className="text-xs font-['Hind_Siliguri']">
                    ЁЯЪА ржЙржирзНржиржд ржПржЖржЗ
                  </Badge>
                </div>
              </div>
            </motion.div>
            
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2 text-sm text-muted-foreground font-['Hind_Siliguri']">
                <Database className="h-4 w-4 text-green-500" />
                <span>рж▓рж╛ржЗржн ржбрж╛ржЯрж╛ржмрзЗрж╕</span>
              </div>
              <Button
                variant="outline"
                size="sm"
                onClick={() => setShowSidebar(!showSidebar)}
                className="font-['Hind_Siliguri']"
              >
                <BookOpen className="h-4 w-4 mr-2" />
                рж░рж┐рж╕рзЛрж░рзНрж╕
              </Button>
            </div>
          </div>
        </div>
      </div>

      <div className="flex">
        {/* Enhanced Sidebar */}
        <AnimatePresence>
          {showSidebar && (
            <motion.div
              initial={{ width: 0, opacity: 0 }}
              animate={{ width: 320, opacity: 1 }}
              exit={{ width: 0, opacity: 0 }}
              className="bg-white/95 backdrop-blur-sm border-r overflow-hidden"
            >
              <ScrollArea className="h-[calc(100vh-80px)] p-4">
                <div className="space-y-4">
                  <Tabs defaultValue="topics" className="w-full">
                    <TabsList className="grid w-full grid-cols-3">
                      <TabsTrigger value="topics" className="text-xs">ржмрж┐рж╖ржпрж╝</TabsTrigger>
                      <TabsTrigger value="formulas" className="text-xs">рж╕рзВрждрзНрж░</TabsTrigger>
                      <TabsTrigger value="history" className="text-xs">ржЗрждрж┐рж╣рж╛рж╕</TabsTrigger>
                    </TabsList>
                    
                    <TabsContent value="topics" className="space-y-3">
                      <h3 className="font-semibold font-['Hind_Siliguri'] text-sm">ржжрзНрж░рзБржд ржмрж┐рж╖ржпрж╝</h3>
                      {quickTopics.map((topic, index) => (
                        <Button
                          key={index}
                          variant="ghost"
                          size="sm"
                          className="w-full justify-start h-auto p-3 font-['Hind_Siliguri']"
                          onClick={() => handleQuickTopic(topic.title)}
                        >
                          <div className="flex items-center gap-2">
                            <span className="text-lg">{topic.icon}</span>
                            <span className="text-sm">{topic.title}</span>
                          </div>
                        </Button>
                      ))}
                    </TabsContent>
                    
                    <TabsContent value="formulas" className="space-y-3">
                      <h3 className="font-semibold font-['Hind_Siliguri'] text-sm">ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг рж╕рзВрждрзНрж░</h3>
                      {mathFormulas.slice(0, 5).map((formula, index) => (
                        <Collapsible key={index}>
                          <CollapsibleTrigger asChild>
                            <Button variant="ghost" size="sm" className="w-full justify-between font-['Hind_Siliguri']">
                              <span className="text-xs">{formula.name}</span>
                              <ChevronDown className="h-3 w-3" />
                            </Button>
                          </CollapsibleTrigger>
                          <CollapsibleContent className="text-xs text-muted-foreground p-2 bg-muted/50 rounded">
                            <div className="font-mono">{formula.formula}</div>
                          </CollapsibleContent>
                        </Collapsible>
                      ))}
                    </TabsContent>
                    
                    <TabsContent value="history" className="space-y-3">
                      <h3 className="font-semibold font-['Hind_Siliguri'] text-sm">ржорж╣рж╛ржи ржмрзНржпржХрзНрждрж┐рждрзНржм</h3>
                      {historicalFacts.slice(0, 3).map((fact, index) => (
                        <Card key={index} className="p-3">
                          <h4 className="font-semibold text-xs font-['Hind_Siliguri']">{fact.person}</h4>
                          <p className="text-xs text-muted-foreground font-['Hind_Siliguri']">{fact.period}</p>
                          <p className="text-xs mt-1 font-['Hind_Siliguri']">{fact.contribution}</p>
                        </Card>
                      ))}
                    </TabsContent>
                  </Tabs>
                </div>
              </ScrollArea>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Main Chat Area */}
        <div className="flex-1">
          {/* Enhanced Beta Warning */}
          <div className="container mx-auto px-4 py-4 max-w-4xl">
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
            >
              <Alert className="border-gradient-primary bg-gradient-to-r from-orange-50 to-yellow-50">
                <div className="flex items-center gap-2">
                  <AlertTriangle className="h-4 w-4 text-orange-600" />
                  <Sparkles className="h-4 w-4 text-yellow-600" />
                </div>
                <AlertDescription className="font-['Hind_Siliguri'] text-orange-800">
                  <strong>ЁЯзк ржмрзЗржЯрж╛ рж╕ржВрж╕рзНржХрж░ржг (v2.0):</strong> ржПржЗ ржЙржирзНржиржд ржЪрзНржпрж╛ржЯржмржЯржЯрж┐ ржПржЦржирзЛ ржЙржирзНржиржпрж╝ржирж╛ржзрзАржиред 
                  ржирждрзБржи ржлрж┐ржЪрж╛рж░: ржмрж┐рж╕рзНрждрзГржд ржбрж╛ржЯрж╛ржмрзЗрж╕, рж╕рзНржорж╛рж░рзНржЯ рж╕ржорж╛ржзрж╛ржи, ржЗржирзНржЯрж╛рж░рзЗржХрзНржЯрж┐ржн рж╢рж┐ржХрзНрж╖рж╛ред 
                  ржЖржкржирж╛рж░ <strong>ржлрж┐ржбржмрзНржпрж╛ржХ</strong> ржЖржорж╛ржжрзЗрж░ ржХрж╛ржЫрзЗ ржЕржорзВрж▓рзНржп! ЁЯЪА
                </AlertDescription>
              </Alert>
            </motion.div>
          </div>

          {/* Chat Container */}
          <div className="container mx-auto px-4 pb-4 max-w-4xl">
            <Card className="h-[60vh] flex flex-col shadow-xl border-primary/20">
              <CardHeader className="pb-2">
                <div className="flex items-center justify-between">
                  <CardTitle className="text-lg font-['Hind_Siliguri'] flex items-center gap-2">
                    <Zap className="h-5 w-5 text-yellow-500" />
                    рж╕рзНржорж╛рж░рзНржЯ ржХржерзЛржкржХржержи
                  </CardTitle>
                  <div className="flex items-center gap-2">
                    <Badge variant="secondary" className="text-xs font-['Hind_Siliguri']">
                      {messages.length - 1} ржмрж╛рж░рзНрждрж╛
                    </Badge>
                    <Badge variant="outline" className="text-xs font-['Hind_Siliguri']">
                      рж▓рж╛ржЗржн ржПржЖржЗ
                    </Badge>
                  </div>
                </div>
              </CardHeader>
              
              <CardContent className="flex-1 p-0">
                <ScrollArea className="h-full p-4">
                  <div className="space-y-4">
                    <AnimatePresence>
                      {messages.map((message) => (
                        <motion.div
                          key={message.id}
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          exit={{ opacity: 0, y: -20 }}
                          className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                        >
                          <div className={`max-w-[85%] ${message.sender === 'user' ? 'ml-8' : 'mr-8'}`}>
                            <div className="flex items-start gap-3 mb-2">
                              {message.sender === 'bot' && (
                                <motion.div 
                                  className="p-2 bg-gradient-to-br from-primary to-primary/80 rounded-full flex-shrink-0"
                                  whileHover={{ scale: 1.1 }}
                                >
                                  <Bot className="h-4 w-4 text-white" />
                                </motion.div>
                              )}
                              {message.sender === 'user' && (
                                <motion.div 
                                  className="p-2 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full order-2 flex-shrink-0"
                                  whileHover={{ scale: 1.1 }}
                                >
                                  <User className="h-4 w-4 text-white" />
                                </motion.div>
                              )}
                              <div className={`flex-1 ${message.sender === 'user' ? 'order-1' : ''}`}>
                                <motion.div
                                  className={`p-4 rounded-2xl ${
                                    message.sender === 'user'
                                      ? 'bg-gradient-to-br from-blue-500 to-blue-600 text-white'
                                      : 'bg-white border shadow-lg border-primary/10'
                                  }`}
                                  whileHover={{ scale: 1.02 }}
                                  transition={{ type: "spring", stiffness: 300 }}
                                >
                                  <div className="whitespace-pre-wrap font-['Hind_Siliguri'] text-sm leading-relaxed">
                                    {message.content}
                                  </div>
                                  
                                  {/* Enhanced message metadata */}
                                  {message.metadata && message.sender === 'bot' && (
                                    <div className="flex items-center gap-2 mt-3 pt-3 border-t border-primary/10">
                                      {message.type === 'solution' && <Calculator className="h-3 w-3 text-green-600" />}
                                      {message.type === 'history' && <History className="h-3 w-3 text-purple-600" />}
                                      {message.type === 'explanation' && <Sparkles className="h-3 w-3 text-blue-600" />}
                                      {message.type === 'formula' && <Target className="h-3 w-3 text-orange-600" />}
                                      
                                      <span className="text-xs text-muted-foreground font-['Hind_Siliguri']">
                                        {message.metadata.category}
                                      </span>
                                      
                                      {message.metadata.difficulty && (
                                        <div className="flex items-center gap-1">
                                          <span className="text-xs text-muted-foreground">ржХржарж┐ржирждрж╛:</span>
                                          {'тнР'.repeat(message.metadata.difficulty)}
                                        </div>
                                      )}
                                    </div>
                                  )}
                                </motion.div>
                                
                                <div className="flex items-center justify-between mt-2">
                                  <div className="text-xs text-muted-foreground font-['Hind_Siliguri']">
                                    {message.timestamp.toLocaleTimeString('bn-BD')}
                                  </div>
                                  
                                  {message.sender === 'bot' && message.metadata?.hasMore && (
                                    <Button
                                      variant="ghost"
                                      size="sm"
                                      className="text-xs font-['Hind_Siliguri']"
                                      onClick={() => setInput('ржПржЗ ржмрж┐рж╖ржпрж╝рзЗ ржЖрж░рзЛ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЬрж╛ржирждрзЗ ржЪрж╛ржЗ')}
                                    >
                                      ржЖрж░рзЛ ржЬрж╛ржирзБржи
                                    </Button>
                                  )}
                                </div>
                              </div>
                            </div>
                          </div>
                        </motion.div>
                      ))}
                    </AnimatePresence>
                    
                    {/* Enhanced loading animation */}
                    {isLoading && (
                      <motion.div
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        className="flex justify-start"
                      >
                        <div className="max-w-[85%] mr-8">
                          <div className="flex items-start gap-3">
                            <motion.div 
                              className="p-2 bg-gradient-to-br from-primary to-primary/80 rounded-full"
                              animate={{ rotate: 360 }}
                              transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
                            >
                              <Brain className="h-4 w-4 text-white" />
                            </motion.div>
                            <div className="bg-white border shadow-lg border-primary/10 p-4 rounded-2xl">
                              <div className="flex items-center gap-3 font-['Hind_Siliguri']">
                                <div className="flex gap-1">
                                  <motion.div 
                                    className="w-2 h-2 bg-primary rounded-full"
                                    animate={{ y: [-5, 0, -5] }}
                                    transition={{ duration: 0.6, repeat: Infinity, delay: 0 }}
                                  />
                                  <motion.div 
                                    className="w-2 h-2 bg-primary rounded-full"
                                    animate={{ y: [-5, 0, -5] }}
                                    transition={{ duration: 0.6, repeat: Infinity, delay: 0.2 }}
                                  />
                                  <motion.div 
                                    className="w-2 h-2 bg-primary rounded-full"
                                    animate={{ y: [-5, 0, -5] }}
                                    transition={{ duration: 0.6, repeat: Infinity, delay: 0.4 }}
                                  />
                                </div>
                                <span className="text-sm text-muted-foreground">
                                  ржЧржнрзАрж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░ржЫрж┐...
                                </span>
                              </div>
                            </div>
                          </div>
                        </div>
                      </motion.div>
                    )}
                    <div ref={messagesEndRef} />
                  </div>
                </ScrollArea>
              </CardContent>
              
              {/* Enhanced Input Area */}
              <div className="border-t p-4 bg-gradient-to-r from-background to-primary/5">
                <div className="flex gap-3">
                  <Input
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="ржЖржкржирж╛рж░ ржмрзАржЬржЧржгрж┐ржд ржкрзНрж░рж╢рзНржи ржмрж╛ рж╕ржорж╕рзНржпрж╛ рж▓рж┐ржЦрзБржи... (ржпрзЗржоржи: 2x + 5 = 11)"
                    className="flex-1 font-['Hind_Siliguri'] border-primary/20 focus:border-primary/40"
                    disabled={isLoading}
                  />
                  <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                    <Button
                      onClick={handleSendMessage}
                      disabled={isLoading || !input.trim()}
                      size="icon"
                      className="bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary"
                    >
                      <Send className="h-4 w-4" />
                    </Button>
                  </motion.div>
                </div>
                <div className="flex items-center justify-between mt-3 text-xs text-muted-foreground font-['Hind_Siliguri']">
                  <span>Enter ржЪрзЗржкрзЗ ржкрж╛ржарж╛ржи тАв AI ржЙржирзНржиржд ржмрж┐рж╢рзНрж▓рзЗрж╖ржг</span>
                  <div className="flex items-center gap-2">
                    <Database className="h-3 w-3 text-green-500" />
                    <span>рж▓рж╛ржЗржн ржбрж╛ржЯрж╛ржмрзЗрж╕ рж╕ржВржпрзБржХрзНржд</span>
                  </div>
                </div>
              </div>
            </Card>
          </div>

          {/* Enhanced Quick Actions */}
          <div className="container mx-auto px-4 pb-8 max-w-4xl">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3 }}
            >
              <div className="text-center mb-4">
                <h3 className="text-lg font-semibold text-primary font-['Hind_Siliguri'] mb-2 flex items-center justify-center gap-2">
                  <Lightbulb className="h-5 w-5 text-yellow-500" />
                  ржжрзНрж░рзБржд рж╢рзБрж░рзБ ржХрж░рзБржи
                </h3>
                <p className="text-sm text-muted-foreground font-['Hind_Siliguri']">
                  ржирж┐ржЪрзЗрж░ ржпрзЗржХрзЛржирзЛ ржмрзЛрждрж╛ржорзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ рждрж╛рзОржХрзНрж╖ржгрж┐ржХ рж╕рж╛рж╣рж╛ржпрзНржп ржкрж╛ржи
                </p>
              </div>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                {[
                  { text: "2x + 5 = 11", desc: "рж░рзИржЦрж┐ржХ рж╕ржорзАржХрж░ржг", icon: "ЁЯУП", difficulty: 2 },
                  { text: "x┬▓ - 9 = 0", desc: "ржжрзНржмрж┐ржШрж╛ржд рж╕ржорзАржХрж░ржг", icon: "ЁЯУР", difficulty: 3 },
                  { text: "ржмрзАржЬржЧржгрж┐рждрзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ ржХрзА?", desc: "ржЗрждрж┐рж╣рж╛рж╕ ржЬрж╛ржирзБржи", icon: "ЁЯПЫя╕П", difficulty: 1 },
                  { text: "(a+b)┬▓ рж╕рзВрждрзНрж░ржЯрж┐ ржХрзА?", desc: "рж╕рзВрждрзНрж░ рж╢рж┐ржЦрзБржи", icon: "ЁЯУЛ", difficulty: 2 },
                  { text: "x┬▓ - 4 ржЧрзБржгржирзАржпрж╝ржХрж░ржг", desc: "ржЧрзБржгржирзАржпрж╝ржХрж░ржг", icon: "тЬВя╕П", difficulty: 3 },
                  { text: "3:4 = x:12 рж╕ржорж╛ржзрж╛ржи", desc: "ржЕржирзБржкрж╛ржд рж╕ржорж╕рзНржпрж╛", icon: "тЪЦя╕П", difficulty: 2 },
                  { text: "x > 5 ржЕрж╕ржорждрж╛ ржХрзА?", desc: "ржЕрж╕ржорждрж╛ ржмрзБржЭрзБржи", icon: "ЁЯУК", difficulty: 3 },
                  { text: "рж╢рзЗржЦрж╛рж░ ржЯрж┐ржкрж╕ ржжрж┐ржи", desc: "ржкржбрж╝рж╛рж░ ржХрзМрж╢рж▓", icon: "ЁЯТб", difficulty: 1 }
                ].map((item, index) => (
                  <motion.div
                    key={index}
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <Button
                      variant="outline"
                      size="sm"
                      className="h-auto p-4 text-left font-['Hind_Siliguri'] w-full border-primary/20 hover:border-primary/40 hover:bg-primary/5"
                      onClick={() => setInput(item.text)}
                    >
                      <div className="space-y-2">
                        <div className="flex items-center gap-2">
                          <span className="text-lg">{item.icon}</span>
                          <div className="flex items-center gap-1">
                            {'тнР'.repeat(item.difficulty)}
                          </div>
                        </div>
                        <div className="font-medium text-sm">{item.text}</div>
                        <div className="text-xs text-muted-foreground">{item.desc}</div>
                      </div>
                    </Button>
                  </motion.div>
                ))}
              </div>
            </motion.div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AlgebraChatbot;